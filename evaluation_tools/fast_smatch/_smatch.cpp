/* Generated by Cython 0.29.5 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "_gain.h"
        ], 
        "language": "c++", 
        "name": "_smatch", 
        "sources": [
            "_smatch.pyx", 
            "_gain.cc"
        ]
    }, 
    "module_name": "_smatch"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_5"
#define CYTHON_HEX_VERSION 0x001D05F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE___smatch
#define __PYX_HAVE_API___smatch
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include "_gain.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "_smatch.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_opt_args_7_smatch_compute_match;
struct __pyx_opt_args_7_smatch_get_best_gain;
struct __pyx_opt_args_7_smatch_get_best_match;

/* "_smatch.pyx":202
 * 
 * @cython.boundscheck(False)
 * cdef int compute_match(const vector[int] & mapping,             # <<<<<<<<<<<<<<
 *                        unordered_map[int, unordered_map[int, int]] & weight_dict,
 *                        verbose=False):
 */
struct __pyx_opt_args_7_smatch_compute_match {
  int __pyx_n;
  PyObject *verbose;
};

/* "_smatch.pyx":253
 * 
 * @cython.boundscheck(False)
 * cdef int get_best_gain(vector[int] & mapping,             # <<<<<<<<<<<<<<
 *                        vector[unordered_set[int]] & candidate_mappings,
 *                        unordered_map[int, unordered_map[int, int]] & weight_dict,
 */
struct __pyx_opt_args_7_smatch_get_best_gain {
  int __pyx_n;
  PyObject *verbose;
};

/* "_smatch.pyx":389
 * 
 * @cython.boundscheck(False)
 * cpdef get_best_match(instance1, attribute1, relation1,             # <<<<<<<<<<<<<<
 *                      instance2, attribute2, relation2,
 *                      prefix1, prefix2, iteration_num=5, verbose=False):
 */
struct __pyx_opt_args_7_smatch_get_best_match {
  int __pyx_n;
  PyObject *iteration_num;
  PyObject *verbose;
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* py_set_remove.proto */
static CYTHON_INLINE int __Pyx_PySet_Remove(PyObject *set, PyObject *key);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from '_smatch' */
static void __pyx_f_7_smatch_smart_init_mapping(std::vector<std::unordered_set<int> >  const &, PyObject *, PyObject *, std::vector<int>  &); /*proto*/
static void __pyx_f_7_smatch_random_init_mapping(std::vector<std::unordered_set<int> >  const &, std::vector<int>  &); /*proto*/
static void __pyx_f_7_smatch_compute_pool(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, std::vector<std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,int> >  &); /*proto*/
static int __pyx_f_7_smatch_compute_match(std::vector<int>  const &, std::unordered_map<int,std::unordered_map<int,int> >  &, struct __pyx_opt_args_7_smatch_compute_match *__pyx_optional_args); /*proto*/
static int __pyx_f_7_smatch_get_best_gain(std::vector<int>  &, std::vector<std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,int> >  &, int, int, std::vector<int>  &, struct __pyx_opt_args_7_smatch_get_best_gain *__pyx_optional_args); /*proto*/
static void __pyx_f_7_smatch_remove_zero_alignments(std::vector<int>  &, std::unordered_map<int,std::unordered_map<int,int> >  &); /*proto*/
static PyObject *__pyx_f_7_smatch_get_best_match(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7_smatch_get_best_match *__pyx_optional_args); /*proto*/
static PyObject *__pyx_convert_unordered_set_to_py_int(std::unordered_set<int>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___(const std::vector<std::unordered_set<int> >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_unordered_map_to_py_int____int(std::unordered_map<int,int>  const &); /*proto*/
static PyObject *__pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___(std::unordered_map<int,std::unordered_map<int,int> >  const &); /*proto*/
#define __Pyx_MODULE_NAME "_smatch"
extern int __pyx_module_is_main__smatch;
int __pyx_module_is_main__smatch = 0;

/* Implementation of '_smatch' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static const char __pyx_k__2[] = "-";
static const char __pyx_k__3[] = ",";
static const char __pyx_k_to[] = "to";
static const char __pyx_k_0_0[] = "0.0";
static const char __pyx_k_and[] = "and";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_from[] = "from ";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_seed[] = "seed";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_choice[] = "choice";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_recall[] = "recall";
static const char __pyx_k_smatch[] = "_smatch";
static const char __pyx_k_stderr[] = "stderr";
static const char __pyx_k_F_score[] = "F-score:";
static const char __pyx_k_f_score[] = "f_score";
static const char __pyx_k_prefix1[] = "prefix1";
static const char __pyx_k_prefix2[] = "prefix2";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_gold_num[] = "gold_num";
static const char __pyx_k_test_num[] = "test_num";
static const char __pyx_k_DEBUG_LOG[] = "DEBUG_LOG";
static const char __pyx_k_ERROR_LOG[] = "ERROR_LOG";
static const char __pyx_k_Iteration[] = "Iteration";
static const char __pyx_k_Move_gain[] = "Move gain:";
static const char __pyx_k_Swap_gain[] = "Swap gain:";
static const char __pyx_k_Swap_node[] = "Swap node";
static const char __pyx_k_compute_f[] = "compute_f";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_instance1[] = "instance1";
static const char __pyx_k_instance2[] = "instance2";
static const char __pyx_k_match_num[] = "match_num";
static const char __pyx_k_node_pair[] = "node_pair";
static const char __pyx_k_precision[] = "precision";
static const char __pyx_k_relation1[] = "relation1";
static const char __pyx_k_relation2[] = "relation2";
static const char __pyx_k_Remap_node[] = "Remap node";
static const char __pyx_k_attribute1[] = "attribute1";
static const char __pyx_k_attribute2[] = "attribute2";
static const char __pyx_k_smatch_pyx[] = "_smatch.pyx";
static const char __pyx_k_Use_move_gain[] = "Use move gain";
static const char __pyx_k_Use_swap_gain[] = "Use swap gain";
static const char __pyx_k_iteration_num[] = "iteration_num";
static const char __pyx_k_After_swapping[] = "After swapping:";
static const char __pyx_k_Before_swapping[] = "Before swapping:";
static const char __pyx_k_Current_mapping[] = "Current mapping";
static const char __pyx_k_Original_mapping[] = "Original mapping";
static const char __pyx_k_Current_mapping_2[] = "Current mapping:";
static const char __pyx_k_Weight_dictionary[] = "Weight dictionary";
static const char __pyx_k_Candidate_mappings[] = "Candidate mappings:";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_relation_match_with[] = "relation match with";
static const char __pyx_k_Node_mapping_at_start[] = "Node mapping at start";
static const char __pyx_k_clear_match_triple_dict[] = "clear_match_triple_dict";
static const char __pyx_k_no_move_swap_gain_found[] = "no move/swap gain found";
static const char __pyx_k_instance_attribute_match[] = "instance/attribute match";
static const char __pyx_k_Computing_match_for_mapping[] = "Computing match for mapping";
static const char __pyx_k_Gain_after_the_hill_climbing[] = "Gain after the hill-climbing";
static const char __pyx_k_Triple_match_number_at_start[] = "Triple match number at start:";
static const char __pyx_k_Update_triple_match_number_to[] = "Update triple match number to:";
static const char __pyx_k_Inconsistency_in_computing_move[] = "Inconsistency in computing: move gain";
static const char __pyx_k_Inconsistency_in_computing_swap[] = "Inconsistency in computing: swap gain";
static const char __pyx_k_match_computing_complete_result[] = "match computing complete, result:";
static PyObject *__pyx_kp_s_0_0;
static PyObject *__pyx_kp_s_After_swapping;
static PyObject *__pyx_kp_s_Before_swapping;
static PyObject *__pyx_kp_s_Candidate_mappings;
static PyObject *__pyx_kp_s_Computing_match_for_mapping;
static PyObject *__pyx_kp_s_Current_mapping;
static PyObject *__pyx_kp_s_Current_mapping_2;
static PyObject *__pyx_n_s_DEBUG_LOG;
static PyObject *__pyx_n_s_ERROR_LOG;
static PyObject *__pyx_kp_s_F_score;
static PyObject *__pyx_kp_s_Gain_after_the_hill_climbing;
static PyObject *__pyx_kp_s_Inconsistency_in_computing_move;
static PyObject *__pyx_kp_s_Inconsistency_in_computing_swap;
static PyObject *__pyx_n_s_Iteration;
static PyObject *__pyx_kp_s_Move_gain;
static PyObject *__pyx_kp_s_Node_mapping_at_start;
static PyObject *__pyx_kp_s_Original_mapping;
static PyObject *__pyx_kp_s_Remap_node;
static PyObject *__pyx_kp_s_Swap_gain;
static PyObject *__pyx_kp_s_Swap_node;
static PyObject *__pyx_kp_s_Triple_match_number_at_start;
static PyObject *__pyx_kp_s_Update_triple_match_number_to;
static PyObject *__pyx_kp_s_Use_move_gain;
static PyObject *__pyx_kp_s_Use_swap_gain;
static PyObject *__pyx_kp_s_Weight_dictionary;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_n_s_and;
static PyObject *__pyx_n_s_attribute1;
static PyObject *__pyx_n_s_attribute2;
static PyObject *__pyx_n_s_choice;
static PyObject *__pyx_n_s_clear_match_triple_dict;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_compute_f;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_f_score;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_kp_s_from;
static PyObject *__pyx_n_s_gold_num;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_instance1;
static PyObject *__pyx_n_s_instance2;
static PyObject *__pyx_kp_s_instance_attribute_match;
static PyObject *__pyx_n_s_iteration_num;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_s_match_computing_complete_result;
static PyObject *__pyx_n_s_match_num;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_move_swap_gain_found;
static PyObject *__pyx_n_s_node_pair;
static PyObject *__pyx_n_s_precision;
static PyObject *__pyx_n_s_prefix1;
static PyObject *__pyx_n_s_prefix2;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_recall;
static PyObject *__pyx_n_s_relation1;
static PyObject *__pyx_n_s_relation2;
static PyObject *__pyx_kp_s_relation_match_with;
static PyObject *__pyx_n_s_seed;
static PyObject *__pyx_n_s_smatch;
static PyObject *__pyx_kp_s_smatch_pyx;
static PyObject *__pyx_n_s_stderr;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_test_num;
static PyObject *__pyx_n_s_to;
static PyObject *__pyx_n_s_verbose;
static PyObject *__pyx_pf_7_smatch_get_best_match(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_instance1, PyObject *__pyx_v_attribute1, PyObject *__pyx_v_relation1, PyObject *__pyx_v_instance2, PyObject *__pyx_v_attribute2, PyObject *__pyx_v_relation2, PyObject *__pyx_v_prefix1, PyObject *__pyx_v_prefix2, PyObject *__pyx_v_iteration_num, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_7_smatch_2clear_match_triple_dict(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7_smatch_4compute_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_match_num, PyObject *__pyx_v_test_num, PyObject *__pyx_v_gold_num, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_float_0_00;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice_;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__8;
/* Late includes */

/* "_smatch.pyx":29
 * 
 * @cython.boundscheck(False)
 * cdef void smart_init_mapping(const vector[unordered_set[int]] & candidate_mapping,             # <<<<<<<<<<<<<<
 *                              instance1, instance2,
 *                              vector[int] & result):
 */

static void __pyx_f_7_smatch_smart_init_mapping(std::vector<std::unordered_set<int> >  const &__pyx_v_candidate_mapping, PyObject *__pyx_v_instance1, PyObject *__pyx_v_instance2, std::vector<int>  &__pyx_v_result) {
  std::unordered_set<int>  __pyx_v_matched_dict;
  std::vector<int>  __pyx_v_no_word_match;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_v_value1 = NULL;
  int __pyx_v_node_index;
  PyObject *__pyx_v_value2 = NULL;
  int __pyx_v_m;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_FakeReference<std::unordered_set<int> > __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  std::vector<int> ::iterator __pyx_t_12;
  __Pyx_FakeReference<std::unordered_set<int> > __pyx_t_13;
  std::unordered_set<int> ::iterator __pyx_t_14;
  std::unordered_set<int>  *__pyx_t_15;
  __Pyx_RefNannySetupContext("smart_init_mapping", 0);

  /* "_smatch.pyx":43
 * 
 *     """
 *     random.seed()             # <<<<<<<<<<<<<<
 *     cdef unordered_set[int] matched_dict
 *     # list to store node indices that have no concept match
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_seed); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_smatch.pyx":47
 *     # list to store node indices that have no concept match
 *     cdef vector[int] no_word_match
 *     result.clear()             # <<<<<<<<<<<<<<
 *     for i in range(len(candidate_mapping)):
 *         candidates = candidate_mapping.at(i)
 */
  __pyx_v_result.clear();

  /* "_smatch.pyx":48
 *     cdef vector[int] no_word_match
 *     result.clear()
 *     for i in range(len(candidate_mapping)):             # <<<<<<<<<<<<<<
 *         candidates = candidate_mapping.at(i)
 *         if len(candidates) == 0:
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___(__pyx_v_candidate_mapping); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "_smatch.pyx":49
 *     result.clear()
 *     for i in range(len(candidate_mapping)):
 *         candidates = candidate_mapping.at(i)             # <<<<<<<<<<<<<<
 *         if len(candidates) == 0:
 *             # no possible mapping
 */
    try {
      __pyx_t_7 = __pyx_v_candidate_mapping.at(__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 49, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_convert_unordered_set_to_py_int(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_candidates, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "_smatch.pyx":50
 *     for i in range(len(candidate_mapping)):
 *         candidates = candidate_mapping.at(i)
 *         if len(candidates) == 0:             # <<<<<<<<<<<<<<
 *             # no possible mapping
 *             result.push_back(-1)
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_candidates); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 50, __pyx_L1_error)
    __pyx_t_9 = ((__pyx_t_8 == 0) != 0);
    if (__pyx_t_9) {

      /* "_smatch.pyx":52
 *         if len(candidates) == 0:
 *             # no possible mapping
 *             result.push_back(-1)             # <<<<<<<<<<<<<<
 *             continue
 *         # node value in instance triples of AMR 1
 */
      try {
        __pyx_v_result.push_back(-1);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 52, __pyx_L1_error)
      }

      /* "_smatch.pyx":53
 *             # no possible mapping
 *             result.push_back(-1)
 *             continue             # <<<<<<<<<<<<<<
 *         # node value in instance triples of AMR 1
 *         value1 = instance1[i][2]
 */
      goto __pyx_L3_continue;

      /* "_smatch.pyx":50
 *     for i in range(len(candidate_mapping)):
 *         candidates = candidate_mapping.at(i)
 *         if len(candidates) == 0:             # <<<<<<<<<<<<<<
 *             # no possible mapping
 *             result.push_back(-1)
 */
    }

    /* "_smatch.pyx":55
 *             continue
 *         # node value in instance triples of AMR 1
 *         value1 = instance1[i][2]             # <<<<<<<<<<<<<<
 *         for node_index in candidates:
 *             value2 = instance2[node_index][2]
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_instance1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value1, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "_smatch.pyx":56
 *         # node value in instance triples of AMR 1
 *         value1 = instance1[i][2]
 *         for node_index in candidates:             # <<<<<<<<<<<<<<
 *             value2 = instance2[node_index][2]
 *             # find the first instance triple match in the candidates
 */
    if (likely(PyList_CheckExact(__pyx_v_candidates)) || PyTuple_CheckExact(__pyx_v_candidates)) {
      __pyx_t_3 = __pyx_v_candidates; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_candidates); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 56, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_10(__pyx_t_3);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 56, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_node_index = __pyx_t_11;

      /* "_smatch.pyx":57
 *         value1 = instance1[i][2]
 *         for node_index in candidates:
 *             value2 = instance2[node_index][2]             # <<<<<<<<<<<<<<
 *             # find the first instance triple match in the candidates
 *             # instance triple match is having the same concept value
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_instance2, __pyx_v_node_index, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_value2, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "_smatch.pyx":60
 *             # find the first instance triple match in the candidates
 *             # instance triple match is having the same concept value
 *             if value1 == value2:             # <<<<<<<<<<<<<<
 *                 if matched_dict.count(node_index) == 0:
 *                     result.push_back(node_index)
 */
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_value1, __pyx_v_value2, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 60, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_9) {

        /* "_smatch.pyx":61
 *             # instance triple match is having the same concept value
 *             if value1 == value2:
 *                 if matched_dict.count(node_index) == 0:             # <<<<<<<<<<<<<<
 *                     result.push_back(node_index)
 *                     matched_dict.insert(node_index)
 */
        __pyx_t_9 = ((__pyx_v_matched_dict.count(__pyx_v_node_index) == 0) != 0);
        if (__pyx_t_9) {

          /* "_smatch.pyx":62
 *             if value1 == value2:
 *                 if matched_dict.count(node_index) == 0:
 *                     result.push_back(node_index)             # <<<<<<<<<<<<<<
 *                     matched_dict.insert(node_index)
 *                     break
 */
          try {
            __pyx_v_result.push_back(__pyx_v_node_index);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 62, __pyx_L1_error)
          }

          /* "_smatch.pyx":63
 *                 if matched_dict.count(node_index) == 0:
 *                     result.push_back(node_index)
 *                     matched_dict.insert(node_index)             # <<<<<<<<<<<<<<
 *                     break
 *         if len(result) == i:
 */
          (void)(__pyx_v_matched_dict.insert(__pyx_v_node_index));

          /* "_smatch.pyx":64
 *                     result.push_back(node_index)
 *                     matched_dict.insert(node_index)
 *                     break             # <<<<<<<<<<<<<<
 *         if len(result) == i:
 *             no_word_match.push_back(i)
 */
          goto __pyx_L7_break;

          /* "_smatch.pyx":61
 *             # instance triple match is having the same concept value
 *             if value1 == value2:
 *                 if matched_dict.count(node_index) == 0:             # <<<<<<<<<<<<<<
 *                     result.push_back(node_index)
 *                     matched_dict.insert(node_index)
 */
        }

        /* "_smatch.pyx":60
 *             # find the first instance triple match in the candidates
 *             # instance triple match is having the same concept value
 *             if value1 == value2:             # <<<<<<<<<<<<<<
 *                 if matched_dict.count(node_index) == 0:
 *                     result.push_back(node_index)
 */
      }

      /* "_smatch.pyx":56
 *         # node value in instance triples of AMR 1
 *         value1 = instance1[i][2]
 *         for node_index in candidates:             # <<<<<<<<<<<<<<
 *             value2 = instance2[node_index][2]
 *             # find the first instance triple match in the candidates
 */
    }
    __pyx_L7_break:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "_smatch.pyx":65
 *                     matched_dict.insert(node_index)
 *                     break
 *         if len(result) == i:             # <<<<<<<<<<<<<<
 *             no_word_match.push_back(i)
 *             result.push_back(-1)
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = ((__pyx_t_8 == __pyx_v_i) != 0);
    if (__pyx_t_9) {

      /* "_smatch.pyx":66
 *                     break
 *         if len(result) == i:
 *             no_word_match.push_back(i)             # <<<<<<<<<<<<<<
 *             result.push_back(-1)
 *     # if no concept match, generate a random mapping
 */
      try {
        __pyx_v_no_word_match.push_back(__pyx_v_i);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 66, __pyx_L1_error)
      }

      /* "_smatch.pyx":67
 *         if len(result) == i:
 *             no_word_match.push_back(i)
 *             result.push_back(-1)             # <<<<<<<<<<<<<<
 *     # if no concept match, generate a random mapping
 *     for i in no_word_match:
 */
      try {
        __pyx_v_result.push_back(-1);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 67, __pyx_L1_error)
      }

      /* "_smatch.pyx":65
 *                     matched_dict.insert(node_index)
 *                     break
 *         if len(result) == i:             # <<<<<<<<<<<<<<
 *             no_word_match.push_back(i)
 *             result.push_back(-1)
 */
    }
    __pyx_L3_continue:;
  }

  /* "_smatch.pyx":69
 *             result.push_back(-1)
 *     # if no concept match, generate a random mapping
 *     for i in no_word_match:             # <<<<<<<<<<<<<<
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]
 *         if len(candidates) > 0:
 */
  __pyx_t_12 = __pyx_v_no_word_match.begin();
  for (;;) {
    if (!(__pyx_t_12 != __pyx_v_no_word_match.end())) break;
    __pyx_t_11 = *__pyx_t_12;
    ++__pyx_t_12;
    __pyx_v_i = __pyx_t_11;

    /* "_smatch.pyx":70
 *     # if no concept match, generate a random mapping
 *     for i in no_word_match:
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]             # <<<<<<<<<<<<<<
 *         if len(candidates) > 0:
 *             result[i] = random.choice(candidates)
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_13 = __pyx_v_candidate_mapping.at(__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 70, __pyx_L1_error)
    }
    __pyx_t_15 = &__pyx_t_13;
    __pyx_t_14 = __pyx_t_15->begin();
    for (;;) {
      if (!(__pyx_t_14 != __pyx_t_15->end())) break;
      __pyx_t_11 = *__pyx_t_14;
      ++__pyx_t_14;
      __pyx_v_m = __pyx_t_11;
      __pyx_t_9 = ((__pyx_v_matched_dict.count(__pyx_v_m) == 0) != 0);
      if (__pyx_t_9) {
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_m); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 70, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
    }
    __Pyx_XDECREF_SET(__pyx_v_candidates, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "_smatch.pyx":71
 *     for i in no_word_match:
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]
 *         if len(candidates) > 0:             # <<<<<<<<<<<<<<
 *             result[i] = random.choice(candidates)
 *             matched_dict.insert(result[i])
 */
    __pyx_t_4 = PyObject_Length(__pyx_v_candidates); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 71, __pyx_L1_error)
    __pyx_t_9 = ((__pyx_t_4 > 0) != 0);
    if (__pyx_t_9) {

      /* "_smatch.pyx":72
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]
 *         if len(candidates) > 0:
 *             result[i] = random.choice(candidates)             # <<<<<<<<<<<<<<
 *             matched_dict.insert(result[i])
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_choice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_candidates) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_candidates);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_result[__pyx_v_i]) = __pyx_t_11;

      /* "_smatch.pyx":73
 *         if len(candidates) > 0:
 *             result[i] = random.choice(candidates)
 *             matched_dict.insert(result[i])             # <<<<<<<<<<<<<<
 * 
 * 
 */
      (void)(__pyx_v_matched_dict.insert((__pyx_v_result[__pyx_v_i])));

      /* "_smatch.pyx":71
 *     for i in no_word_match:
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]
 *         if len(candidates) > 0:             # <<<<<<<<<<<<<<
 *             result[i] = random.choice(candidates)
 *             matched_dict.insert(result[i])
 */
    }

    /* "_smatch.pyx":69
 *             result.push_back(-1)
 *     # if no concept match, generate a random mapping
 *     for i in no_word_match:             # <<<<<<<<<<<<<<
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]
 *         if len(candidates) > 0:
 */
  }

  /* "_smatch.pyx":29
 * 
 * @cython.boundscheck(False)
 * cdef void smart_init_mapping(const vector[unordered_set[int]] & candidate_mapping,             # <<<<<<<<<<<<<<
 *                              instance1, instance2,
 *                              vector[int] & result):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("_smatch.smart_init_mapping", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_value1);
  __Pyx_XDECREF(__pyx_v_value2);
  __Pyx_RefNannyFinishContext();
}

/* "_smatch.pyx":77
 * 
 * @cython.boundscheck(False)
 * cdef void random_init_mapping(const vector[unordered_set[int]] & candidate_mapping,             # <<<<<<<<<<<<<<
 *                               vector[int] & result):
 *     """
 */

static void __pyx_f_7_smatch_random_init_mapping(std::vector<std::unordered_set<int> >  const &__pyx_v_candidate_mapping, std::vector<int>  &__pyx_v_result) {
  std::unordered_set<int>  __pyx_v_matched_dict;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_v_rid = NULL;
  int __pyx_v_m;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_FakeReference<std::unordered_set<int> > __pyx_t_7;
  std::unordered_set<int> ::iterator __pyx_t_8;
  std::unordered_set<int>  *__pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("random_init_mapping", 0);

  /* "_smatch.pyx":89
 *     """
 *     # if needed, a fixed seed could be passed here to generate same random (to help debugging)
 *     random.seed()             # <<<<<<<<<<<<<<
 *     cdef unordered_set[int] matched_dict
 *     result.clear()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_seed); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_smatch.pyx":91
 *     random.seed()
 *     cdef unordered_set[int] matched_dict
 *     result.clear()             # <<<<<<<<<<<<<<
 *     for i in range(len(candidate_mapping)):
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]
 */
  __pyx_v_result.clear();

  /* "_smatch.pyx":92
 *     cdef unordered_set[int] matched_dict
 *     result.clear()
 *     for i in range(len(candidate_mapping)):             # <<<<<<<<<<<<<<
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]
 *         if len(candidates) == 0:
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___(__pyx_v_candidate_mapping); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "_smatch.pyx":93
 *     result.clear()
 *     for i in range(len(candidate_mapping)):
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]             # <<<<<<<<<<<<<<
 *         if len(candidates) == 0:
 *             # -1 indicates no possible mapping
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    try {
      __pyx_t_7 = __pyx_v_candidate_mapping.at(__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 93, __pyx_L1_error)
    }
    __pyx_t_9 = &__pyx_t_7;
    __pyx_t_8 = __pyx_t_9->begin();
    for (;;) {
      if (!(__pyx_t_8 != __pyx_t_9->end())) break;
      __pyx_t_10 = *__pyx_t_8;
      ++__pyx_t_8;
      __pyx_v_m = __pyx_t_10;
      __pyx_t_11 = ((__pyx_v_matched_dict.count(__pyx_v_m) == 0) != 0);
      if (__pyx_t_11) {
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 93, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_XDECREF_SET(__pyx_v_candidates, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "_smatch.pyx":94
 *     for i in range(len(candidate_mapping)):
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]
 *         if len(candidates) == 0:             # <<<<<<<<<<<<<<
 *             # -1 indicates no possible mapping
 *             result.push_back(-1)
 */
    __pyx_t_12 = PyList_GET_SIZE(__pyx_v_candidates); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 94, __pyx_L1_error)
    __pyx_t_11 = ((__pyx_t_12 == 0) != 0);
    if (__pyx_t_11) {

      /* "_smatch.pyx":96
 *         if len(candidates) == 0:
 *             # -1 indicates no possible mapping
 *             result.push_back(-1)             # <<<<<<<<<<<<<<
 *         else:
 *             rid = random.choice(candidates)
 */
      try {
        __pyx_v_result.push_back(-1);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 96, __pyx_L1_error)
      }

      /* "_smatch.pyx":94
 *     for i in range(len(candidate_mapping)):
 *         candidates = [m for m in candidate_mapping.at(i) if matched_dict.count(m) == 0]
 *         if len(candidates) == 0:             # <<<<<<<<<<<<<<
 *             # -1 indicates no possible mapping
 *             result.push_back(-1)
 */
      goto __pyx_L8;
    }

    /* "_smatch.pyx":98
 *             result.push_back(-1)
 *         else:
 *             rid = random.choice(candidates)             # <<<<<<<<<<<<<<
 *             result.push_back(rid)
 *             matched_dict.insert(rid)
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_random); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_choice); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_candidates) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_candidates);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_rid, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "_smatch.pyx":99
 *         else:
 *             rid = random.choice(candidates)
 *             result.push_back(rid)             # <<<<<<<<<<<<<<
 *             matched_dict.insert(rid)
 * 
 */
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_rid); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 99, __pyx_L1_error)
      try {
        __pyx_v_result.push_back(__pyx_t_10);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 99, __pyx_L1_error)
      }

      /* "_smatch.pyx":100
 *             rid = random.choice(candidates)
 *             result.push_back(rid)
 *             matched_dict.insert(rid)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_rid); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L1_error)
      (void)(__pyx_v_matched_dict.insert(__pyx_t_10));
    }
    __pyx_L8:;
  }

  /* "_smatch.pyx":77
 * 
 * @cython.boundscheck(False)
 * cdef void random_init_mapping(const vector[unordered_set[int]] & candidate_mapping,             # <<<<<<<<<<<<<<
 *                               vector[int] & result):
 *     """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("_smatch.random_init_mapping", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_rid);
  __Pyx_RefNannyFinishContext();
}

/* "_smatch.pyx":104
 * 
 * @cython.boundscheck(False)
 * cdef void compute_pool(instance1, attribute1, relation1,             # <<<<<<<<<<<<<<
 *                        instance2, attribute2, relation2,
 *                        prefix1, prefix2,
 */

static void __pyx_f_7_smatch_compute_pool(PyObject *__pyx_v_instance1, PyObject *__pyx_v_attribute1, PyObject *__pyx_v_relation1, PyObject *__pyx_v_instance2, PyObject *__pyx_v_attribute2, PyObject *__pyx_v_relation2, PyObject *__pyx_v_prefix1, PyObject *__pyx_v_prefix2, std::vector<std::unordered_set<int> >  &__pyx_v_candidate_mapping, std::unordered_map<int,std::unordered_map<int,int> >  &__pyx_v_weight_dict) {
  int __pyx_v_node_pair;
  int __pyx_v_node_pair1;
  int __pyx_v_node_pair2;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  PyObject *__pyx_v_node1_index = NULL;
  PyObject *__pyx_v_node2_index = NULL;
  PyObject *__pyx_v_node1_index_amr1 = NULL;
  PyObject *__pyx_v_node1_index_amr2 = NULL;
  PyObject *__pyx_v_node2_index_amr1 = NULL;
  PyObject *__pyx_v_node2_index_amr2 = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  std::unordered_set<int>  __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  std::vector<std::unordered_set<int> > ::size_type __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("compute_pool", 0);

  /* "_smatch.pyx":135
 * 
 *     """
 *     candidate_mapping.clear()             # <<<<<<<<<<<<<<
 *     weight_dict.clear()
 * 
 */
  __pyx_v_candidate_mapping.clear();

  /* "_smatch.pyx":136
 *     """
 *     candidate_mapping.clear()
 *     weight_dict.clear()             # <<<<<<<<<<<<<<
 * 
 *     cdef int node_pair
 */
  __pyx_v_weight_dict.clear();

  /* "_smatch.pyx":141
 *     cdef int node_pair1
 *     cdef int node_pair2
 *     for i in range(len(instance1)):             # <<<<<<<<<<<<<<
 *         # each candidate mapping is a set of node indices
 *         candidate_mapping.push_back(unordered_set[int]())
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_instance1); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_smatch.pyx":143
 *     for i in range(len(instance1)):
 *         # each candidate mapping is a set of node indices
 *         candidate_mapping.push_back(unordered_set[int]())             # <<<<<<<<<<<<<<
 *         for j in range(len(instance2)):
 *             # if both triples are instance triples and have the same valueprint(G.edges(data=True))
 */
    try {
      __pyx_t_4 = std::unordered_set<int> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 143, __pyx_L1_error)
    }
    try {
      __pyx_v_candidate_mapping.push_back(__pyx_t_4);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 143, __pyx_L1_error)
    }

    /* "_smatch.pyx":144
 *         # each candidate mapping is a set of node indices
 *         candidate_mapping.push_back(unordered_set[int]())
 *         for j in range(len(instance2)):             # <<<<<<<<<<<<<<
 *             # if both triples are instance triples and have the same valueprint(G.edges(data=True))
 *             if instance1[i][0].lower() == instance2[j][0].lower() \
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_instance2); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 144, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "_smatch.pyx":146
 *         for j in range(len(instance2)):
 *             # if both triples are instance triples and have the same valueprint(G.edges(data=True))
 *             if instance1[i][0].lower() == instance2[j][0].lower() \             # <<<<<<<<<<<<<<
 *                     and instance1[i][2].lower() == instance2[j][2].lower():
 *                 # get node index by stripping the prefix
 */
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_instance1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_lower); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_instance2, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_11, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_lower); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyObject_RichCompare(__pyx_t_9, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_13) {
      } else {
        __pyx_t_8 = __pyx_t_13;
        goto __pyx_L8_bool_binop_done;
      }

      /* "_smatch.pyx":147
 *             # if both triples are instance triples and have the same valueprint(G.edges(data=True))
 *             if instance1[i][0].lower() == instance2[j][0].lower() \
 *                     and instance1[i][2].lower() == instance2[j][2].lower():             # <<<<<<<<<<<<<<
 *                 # get node index by stripping the prefix
 *                 node1_index = int(instance1[i][1][len(prefix1):])
 */
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_instance1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_10, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_lower); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_11 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_instance2, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_9, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_lower); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_11, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_8 = __pyx_t_13;
      __pyx_L8_bool_binop_done:;

      /* "_smatch.pyx":146
 *         for j in range(len(instance2)):
 *             # if both triples are instance triples and have the same valueprint(G.edges(data=True))
 *             if instance1[i][0].lower() == instance2[j][0].lower() \             # <<<<<<<<<<<<<<
 *                     and instance1[i][2].lower() == instance2[j][2].lower():
 *                 # get node index by stripping the prefix
 */
      if (__pyx_t_8) {

        /* "_smatch.pyx":149
 *                     and instance1[i][2].lower() == instance2[j][2].lower():
 *                 # get node index by stripping the prefix
 *                 node1_index = int(instance1[i][1][len(prefix1):])             # <<<<<<<<<<<<<<
 *                 node2_index = int(instance2[j][1][len(prefix2):])
 *                 candidate_mapping[node1_index].insert(node2_index)
 */
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_instance1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_9, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = PyObject_Length(__pyx_v_prefix1); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 149, __pyx_L1_error)
        __pyx_t_9 = __Pyx_PyObject_GetSlice(__pyx_t_10, __pyx_t_14, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_node1_index, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "_smatch.pyx":150
 *                 # get node index by stripping the prefix
 *                 node1_index = int(instance1[i][1][len(prefix1):])
 *                 node2_index = int(instance2[j][1][len(prefix2):])             # <<<<<<<<<<<<<<
 *                 candidate_mapping[node1_index].insert(node2_index)
 *                 node_pair = _hash_pair(node1_index, node2_index)
 */
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_instance2, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_14 = PyObject_Length(__pyx_v_prefix2); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 150, __pyx_L1_error)
        __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_t_9, __pyx_t_14, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyNumber_Int(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_node2_index, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "_smatch.pyx":151
 *                 node1_index = int(instance1[i][1][len(prefix1):])
 *                 node2_index = int(instance2[j][1][len(prefix2):])
 *                 candidate_mapping[node1_index].insert(node2_index)             # <<<<<<<<<<<<<<
 *                 node_pair = _hash_pair(node1_index, node2_index)
 *                 weight_dict[node_pair][-1] += 1
 */
        __pyx_t_15 = __Pyx_PyInt_As_size_t(__pyx_v_node1_index); if (unlikely((__pyx_t_15 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
        __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_node2_index); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
        (void)((__pyx_v_candidate_mapping[__pyx_t_15]).insert(__pyx_t_16));

        /* "_smatch.pyx":152
 *                 node2_index = int(instance2[j][1][len(prefix2):])
 *                 candidate_mapping[node1_index].insert(node2_index)
 *                 node_pair = _hash_pair(node1_index, node2_index)             # <<<<<<<<<<<<<<
 *                 weight_dict[node_pair][-1] += 1
 *     for i in range(0, len(attribute1)):
 */
        __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_node1_index); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L1_error)
        __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_node2_index); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L1_error)
        __pyx_v_node_pair = _hash_pair(__pyx_t_16, __pyx_t_17);

        /* "_smatch.pyx":153
 *                 candidate_mapping[node1_index].insert(node2_index)
 *                 node_pair = _hash_pair(node1_index, node2_index)
 *                 weight_dict[node_pair][-1] += 1             # <<<<<<<<<<<<<<
 *     for i in range(0, len(attribute1)):
 *         for j in range(0, len(attribute2)):
 */
        __pyx_t_17 = __pyx_v_node_pair;
        __pyx_t_16 = -1;
        ((__pyx_v_weight_dict[__pyx_t_17])[__pyx_t_16]) = (((__pyx_v_weight_dict[__pyx_t_17])[__pyx_t_16]) + 1);

        /* "_smatch.pyx":146
 *         for j in range(len(instance2)):
 *             # if both triples are instance triples and have the same valueprint(G.edges(data=True))
 *             if instance1[i][0].lower() == instance2[j][0].lower() \             # <<<<<<<<<<<<<<
 *                     and instance1[i][2].lower() == instance2[j][2].lower():
 *                 # get node index by stripping the prefix
 */
      }
    }
  }

  /* "_smatch.pyx":154
 *                 node_pair = _hash_pair(node1_index, node2_index)
 *                 weight_dict[node_pair][-1] += 1
 *     for i in range(0, len(attribute1)):             # <<<<<<<<<<<<<<
 *         for j in range(0, len(attribute2)):
 *             # if both attribute relation triple have the same relation name and value
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_attribute1); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_smatch.pyx":155
 *                 weight_dict[node_pair][-1] += 1
 *     for i in range(0, len(attribute1)):
 *         for j in range(0, len(attribute2)):             # <<<<<<<<<<<<<<
 *             # if both attribute relation triple have the same relation name and value
 *             if attribute1[i][0].lower() == attribute2[j][0].lower() \
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_attribute2); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 155, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "_smatch.pyx":157
 *         for j in range(0, len(attribute2)):
 *             # if both attribute relation triple have the same relation name and value
 *             if attribute1[i][0].lower() == attribute2[j][0].lower() \             # <<<<<<<<<<<<<<
 *                     and attribute1[i][2].lower() == attribute2[j][2].lower():
 *                 node1_index = int(attribute1[i][1][len(prefix1):])
 */
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_attribute1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_lower); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_attribute2, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_11, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_lower); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyObject_RichCompare(__pyx_t_9, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_13) {
      } else {
        __pyx_t_8 = __pyx_t_13;
        goto __pyx_L15_bool_binop_done;
      }

      /* "_smatch.pyx":158
 *             # if both attribute relation triple have the same relation name and value
 *             if attribute1[i][0].lower() == attribute2[j][0].lower() \
 *                     and attribute1[i][2].lower() == attribute2[j][2].lower():             # <<<<<<<<<<<<<<
 *                 node1_index = int(attribute1[i][1][len(prefix1):])
 *                 node2_index = int(attribute2[j][1][len(prefix2):])
 */
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_attribute1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_10, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_lower); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_11 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_attribute2, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_9, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_lower); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_11, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_8 = __pyx_t_13;
      __pyx_L15_bool_binop_done:;

      /* "_smatch.pyx":157
 *         for j in range(0, len(attribute2)):
 *             # if both attribute relation triple have the same relation name and value
 *             if attribute1[i][0].lower() == attribute2[j][0].lower() \             # <<<<<<<<<<<<<<
 *                     and attribute1[i][2].lower() == attribute2[j][2].lower():
 *                 node1_index = int(attribute1[i][1][len(prefix1):])
 */
      if (__pyx_t_8) {

        /* "_smatch.pyx":159
 *             if attribute1[i][0].lower() == attribute2[j][0].lower() \
 *                     and attribute1[i][2].lower() == attribute2[j][2].lower():
 *                 node1_index = int(attribute1[i][1][len(prefix1):])             # <<<<<<<<<<<<<<
 *                 node2_index = int(attribute2[j][1][len(prefix2):])
 *                 candidate_mapping[node1_index].insert(node2_index)
 */
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_attribute1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_9, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = PyObject_Length(__pyx_v_prefix1); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 159, __pyx_L1_error)
        __pyx_t_9 = __Pyx_PyObject_GetSlice(__pyx_t_10, __pyx_t_14, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_node1_index, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "_smatch.pyx":160
 *                     and attribute1[i][2].lower() == attribute2[j][2].lower():
 *                 node1_index = int(attribute1[i][1][len(prefix1):])
 *                 node2_index = int(attribute2[j][1][len(prefix2):])             # <<<<<<<<<<<<<<
 *                 candidate_mapping[node1_index].insert(node2_index)
 *                 node_pair = _hash_pair(node1_index, node2_index)
 */
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_attribute2, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_14 = PyObject_Length(__pyx_v_prefix2); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 160, __pyx_L1_error)
        __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_t_9, __pyx_t_14, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyNumber_Int(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_node2_index, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "_smatch.pyx":161
 *                 node1_index = int(attribute1[i][1][len(prefix1):])
 *                 node2_index = int(attribute2[j][1][len(prefix2):])
 *                 candidate_mapping[node1_index].insert(node2_index)             # <<<<<<<<<<<<<<
 *                 node_pair = _hash_pair(node1_index, node2_index)
 *                 weight_dict[node_pair][-1] += 1
 */
        __pyx_t_15 = __Pyx_PyInt_As_size_t(__pyx_v_node1_index); if (unlikely((__pyx_t_15 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L1_error)
        __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_node2_index); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L1_error)
        (void)((__pyx_v_candidate_mapping[__pyx_t_15]).insert(__pyx_t_17));

        /* "_smatch.pyx":162
 *                 node2_index = int(attribute2[j][1][len(prefix2):])
 *                 candidate_mapping[node1_index].insert(node2_index)
 *                 node_pair = _hash_pair(node1_index, node2_index)             # <<<<<<<<<<<<<<
 *                 weight_dict[node_pair][-1] += 1
 *     for i in range(0, len(relation1)):
 */
        __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_node1_index); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L1_error)
        __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_node2_index); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L1_error)
        __pyx_v_node_pair = _hash_pair(__pyx_t_17, __pyx_t_16);

        /* "_smatch.pyx":163
 *                 candidate_mapping[node1_index].insert(node2_index)
 *                 node_pair = _hash_pair(node1_index, node2_index)
 *                 weight_dict[node_pair][-1] += 1             # <<<<<<<<<<<<<<
 *     for i in range(0, len(relation1)):
 *         for j in range(0, len(relation2)):
 */
        __pyx_t_16 = __pyx_v_node_pair;
        __pyx_t_17 = -1;
        ((__pyx_v_weight_dict[__pyx_t_16])[__pyx_t_17]) = (((__pyx_v_weight_dict[__pyx_t_16])[__pyx_t_17]) + 1);

        /* "_smatch.pyx":157
 *         for j in range(0, len(attribute2)):
 *             # if both attribute relation triple have the same relation name and value
 *             if attribute1[i][0].lower() == attribute2[j][0].lower() \             # <<<<<<<<<<<<<<
 *                     and attribute1[i][2].lower() == attribute2[j][2].lower():
 *                 node1_index = int(attribute1[i][1][len(prefix1):])
 */
      }
    }
  }

  /* "_smatch.pyx":164
 *                 node_pair = _hash_pair(node1_index, node2_index)
 *                 weight_dict[node_pair][-1] += 1
 *     for i in range(0, len(relation1)):             # <<<<<<<<<<<<<<
 *         for j in range(0, len(relation2)):
 *             # if both relation share the same name
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_relation1); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_smatch.pyx":165
 *                 weight_dict[node_pair][-1] += 1
 *     for i in range(0, len(relation1)):
 *         for j in range(0, len(relation2)):             # <<<<<<<<<<<<<<
 *             # if both relation share the same name
 *             if relation1[i][0].lower() == relation2[j][0].lower():
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_relation2); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 165, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "_smatch.pyx":167
 *         for j in range(0, len(relation2)):
 *             # if both relation share the same name
 *             if relation1[i][0].lower() == relation2[j][0].lower():             # <<<<<<<<<<<<<<
 *                 node1_index_amr1 = int(relation1[i][1][len(prefix1):])
 *                 node1_index_amr2 = int(relation2[j][1][len(prefix2):])
 */
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_relation1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_lower); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_relation2, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_11, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_lower); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyObject_RichCompare(__pyx_t_9, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_8) {

        /* "_smatch.pyx":168
 *             # if both relation share the same name
 *             if relation1[i][0].lower() == relation2[j][0].lower():
 *                 node1_index_amr1 = int(relation1[i][1][len(prefix1):])             # <<<<<<<<<<<<<<
 *                 node1_index_amr2 = int(relation2[j][1][len(prefix2):])
 *                 node2_index_amr1 = int(relation1[i][2][len(prefix1):])
 */
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_relation1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_11, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_14 = PyObject_Length(__pyx_v_prefix1); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 168, __pyx_L1_error)
        __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_t_10, __pyx_t_14, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_node1_index_amr1, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "_smatch.pyx":169
 *             if relation1[i][0].lower() == relation2[j][0].lower():
 *                 node1_index_amr1 = int(relation1[i][1][len(prefix1):])
 *                 node1_index_amr2 = int(relation2[j][1][len(prefix2):])             # <<<<<<<<<<<<<<
 *                 node2_index_amr1 = int(relation1[i][2][len(prefix1):])
 *                 node2_index_amr2 = int(relation2[j][2][len(prefix2):])
 */
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_relation2, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_14 = PyObject_Length(__pyx_v_prefix2); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 169, __pyx_L1_error)
        __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_t_11, __pyx_t_14, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyNumber_Int(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_node1_index_amr2, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "_smatch.pyx":170
 *                 node1_index_amr1 = int(relation1[i][1][len(prefix1):])
 *                 node1_index_amr2 = int(relation2[j][1][len(prefix2):])
 *                 node2_index_amr1 = int(relation1[i][2][len(prefix1):])             # <<<<<<<<<<<<<<
 *                 node2_index_amr2 = int(relation2[j][2][len(prefix2):])
 *                 # add mapping between two nodes
 */
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_relation1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_11, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_14 = PyObject_Length(__pyx_v_prefix1); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 170, __pyx_L1_error)
        __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_t_10, __pyx_t_14, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_node2_index_amr1, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "_smatch.pyx":171
 *                 node1_index_amr2 = int(relation2[j][1][len(prefix2):])
 *                 node2_index_amr1 = int(relation1[i][2][len(prefix1):])
 *                 node2_index_amr2 = int(relation2[j][2][len(prefix2):])             # <<<<<<<<<<<<<<
 *                 # add mapping between two nodes
 *                 candidate_mapping[node1_index_amr1].insert(node1_index_amr2)
 */
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_relation2, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_10, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_14 = PyObject_Length(__pyx_v_prefix2); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 171, __pyx_L1_error)
        __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_t_11, __pyx_t_14, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyNumber_Int(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_node2_index_amr2, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "_smatch.pyx":173
 *                 node2_index_amr2 = int(relation2[j][2][len(prefix2):])
 *                 # add mapping between two nodes
 *                 candidate_mapping[node1_index_amr1].insert(node1_index_amr2)             # <<<<<<<<<<<<<<
 *                 candidate_mapping[node2_index_amr1].insert(node2_index_amr2)
 *                 node_pair1 = _hash_pair(node1_index_amr1, node1_index_amr2)
 */
        __pyx_t_15 = __Pyx_PyInt_As_size_t(__pyx_v_node1_index_amr1); if (unlikely((__pyx_t_15 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)
        __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_node1_index_amr2); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)
        (void)((__pyx_v_candidate_mapping[__pyx_t_15]).insert(__pyx_t_16));

        /* "_smatch.pyx":174
 *                 # add mapping between two nodes
 *                 candidate_mapping[node1_index_amr1].insert(node1_index_amr2)
 *                 candidate_mapping[node2_index_amr1].insert(node2_index_amr2)             # <<<<<<<<<<<<<<
 *                 node_pair1 = _hash_pair(node1_index_amr1, node1_index_amr2)
 *                 node_pair2 = _hash_pair(node2_index_amr1, node2_index_amr2)
 */
        __pyx_t_15 = __Pyx_PyInt_As_size_t(__pyx_v_node2_index_amr1); if (unlikely((__pyx_t_15 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
        __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_node2_index_amr2); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
        (void)((__pyx_v_candidate_mapping[__pyx_t_15]).insert(__pyx_t_16));

        /* "_smatch.pyx":175
 *                 candidate_mapping[node1_index_amr1].insert(node1_index_amr2)
 *                 candidate_mapping[node2_index_amr1].insert(node2_index_amr2)
 *                 node_pair1 = _hash_pair(node1_index_amr1, node1_index_amr2)             # <<<<<<<<<<<<<<
 *                 node_pair2 = _hash_pair(node2_index_amr1, node2_index_amr2)
 *                 if node_pair2 != node_pair1:
 */
        __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_node1_index_amr1); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
        __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_node1_index_amr2); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
        __pyx_v_node_pair1 = _hash_pair(__pyx_t_16, __pyx_t_17);

        /* "_smatch.pyx":176
 *                 candidate_mapping[node2_index_amr1].insert(node2_index_amr2)
 *                 node_pair1 = _hash_pair(node1_index_amr1, node1_index_amr2)
 *                 node_pair2 = _hash_pair(node2_index_amr1, node2_index_amr2)             # <<<<<<<<<<<<<<
 *                 if node_pair2 != node_pair1:
 *                     # update weight_dict weight. Note that we need to update both entries for future search
 */
        __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_node2_index_amr1); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L1_error)
        __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_node2_index_amr2); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L1_error)
        __pyx_v_node_pair2 = _hash_pair(__pyx_t_17, __pyx_t_16);

        /* "_smatch.pyx":177
 *                 node_pair1 = _hash_pair(node1_index_amr1, node1_index_amr2)
 *                 node_pair2 = _hash_pair(node2_index_amr1, node2_index_amr2)
 *                 if node_pair2 != node_pair1:             # <<<<<<<<<<<<<<
 *                     # update weight_dict weight. Note that we need to update both entries for future search
 *                     # i.e weight_dict[node_pair1][node_pair2]
 */
        __pyx_t_8 = ((__pyx_v_node_pair2 != __pyx_v_node_pair1) != 0);
        if (__pyx_t_8) {

          /* "_smatch.pyx":181
 *                     # i.e weight_dict[node_pair1][node_pair2]
 *                     #     weight_dict[node_pair2][node_pair1]
 *                     if node1_index_amr1 > node2_index_amr1:             # <<<<<<<<<<<<<<
 *                         # swap node_pair1 and node_pair2
 *                         node_pair1 = _hash_pair(node2_index_amr1, node2_index_amr2)
 */
          __pyx_t_11 = PyObject_RichCompare(__pyx_v_node1_index_amr1, __pyx_v_node2_index_amr1, Py_GT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 181, __pyx_L1_error)
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (__pyx_t_8) {

            /* "_smatch.pyx":183
 *                     if node1_index_amr1 > node2_index_amr1:
 *                         # swap node_pair1 and node_pair2
 *                         node_pair1 = _hash_pair(node2_index_amr1, node2_index_amr2)             # <<<<<<<<<<<<<<
 *                         node_pair2 = _hash_pair(node1_index_amr1, node1_index_amr2)
 *                     if weight_dict.count(node_pair1):
 */
            __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_node2_index_amr1); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L1_error)
            __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_node2_index_amr2); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L1_error)
            __pyx_v_node_pair1 = _hash_pair(__pyx_t_16, __pyx_t_17);

            /* "_smatch.pyx":184
 *                         # swap node_pair1 and node_pair2
 *                         node_pair1 = _hash_pair(node2_index_amr1, node2_index_amr2)
 *                         node_pair2 = _hash_pair(node1_index_amr1, node1_index_amr2)             # <<<<<<<<<<<<<<
 *                     if weight_dict.count(node_pair1):
 *                         weight_dict[node_pair1][node_pair2] += 1
 */
            __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_node1_index_amr1); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 184, __pyx_L1_error)
            __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_node1_index_amr2); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 184, __pyx_L1_error)
            __pyx_v_node_pair2 = _hash_pair(__pyx_t_17, __pyx_t_16);

            /* "_smatch.pyx":181
 *                     # i.e weight_dict[node_pair1][node_pair2]
 *                     #     weight_dict[node_pair2][node_pair1]
 *                     if node1_index_amr1 > node2_index_amr1:             # <<<<<<<<<<<<<<
 *                         # swap node_pair1 and node_pair2
 *                         node_pair1 = _hash_pair(node2_index_amr1, node2_index_amr2)
 */
          }

          /* "_smatch.pyx":185
 *                         node_pair1 = _hash_pair(node2_index_amr1, node2_index_amr2)
 *                         node_pair2 = _hash_pair(node1_index_amr1, node1_index_amr2)
 *                     if weight_dict.count(node_pair1):             # <<<<<<<<<<<<<<
 *                         weight_dict[node_pair1][node_pair2] += 1
 *                     else:
 */
          __pyx_t_8 = (__pyx_v_weight_dict.count(__pyx_v_node_pair1) != 0);
          if (__pyx_t_8) {

            /* "_smatch.pyx":186
 *                         node_pair2 = _hash_pair(node1_index_amr1, node1_index_amr2)
 *                     if weight_dict.count(node_pair1):
 *                         weight_dict[node_pair1][node_pair2] += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         weight_dict[node_pair1][-1] = 0
 */
            __pyx_t_16 = __pyx_v_node_pair1;
            __pyx_t_17 = __pyx_v_node_pair2;
            ((__pyx_v_weight_dict[__pyx_t_16])[__pyx_t_17]) = (((__pyx_v_weight_dict[__pyx_t_16])[__pyx_t_17]) + 1);

            /* "_smatch.pyx":185
 *                         node_pair1 = _hash_pair(node2_index_amr1, node2_index_amr2)
 *                         node_pair2 = _hash_pair(node1_index_amr1, node1_index_amr2)
 *                     if weight_dict.count(node_pair1):             # <<<<<<<<<<<<<<
 *                         weight_dict[node_pair1][node_pair2] += 1
 *                     else:
 */
            goto __pyx_L24;
          }

          /* "_smatch.pyx":188
 *                         weight_dict[node_pair1][node_pair2] += 1
 *                     else:
 *                         weight_dict[node_pair1][-1] = 0             # <<<<<<<<<<<<<<
 *                         weight_dict[node_pair1][node_pair2] = 1
 *                     if weight_dict.count(node_pair2):
 */
          /*else*/ {
            ((__pyx_v_weight_dict[__pyx_v_node_pair1])[-1]) = 0;

            /* "_smatch.pyx":189
 *                     else:
 *                         weight_dict[node_pair1][-1] = 0
 *                         weight_dict[node_pair1][node_pair2] = 1             # <<<<<<<<<<<<<<
 *                     if weight_dict.count(node_pair2):
 *                         weight_dict[node_pair2][node_pair1] += 1
 */
            ((__pyx_v_weight_dict[__pyx_v_node_pair1])[__pyx_v_node_pair2]) = 1;
          }
          __pyx_L24:;

          /* "_smatch.pyx":190
 *                         weight_dict[node_pair1][-1] = 0
 *                         weight_dict[node_pair1][node_pair2] = 1
 *                     if weight_dict.count(node_pair2):             # <<<<<<<<<<<<<<
 *                         weight_dict[node_pair2][node_pair1] += 1
 *                     else:
 */
          __pyx_t_8 = (__pyx_v_weight_dict.count(__pyx_v_node_pair2) != 0);
          if (__pyx_t_8) {

            /* "_smatch.pyx":191
 *                         weight_dict[node_pair1][node_pair2] = 1
 *                     if weight_dict.count(node_pair2):
 *                         weight_dict[node_pair2][node_pair1] += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         weight_dict[node_pair2][-1] = 0
 */
            __pyx_t_16 = __pyx_v_node_pair2;
            __pyx_t_17 = __pyx_v_node_pair1;
            ((__pyx_v_weight_dict[__pyx_t_16])[__pyx_t_17]) = (((__pyx_v_weight_dict[__pyx_t_16])[__pyx_t_17]) + 1);

            /* "_smatch.pyx":190
 *                         weight_dict[node_pair1][-1] = 0
 *                         weight_dict[node_pair1][node_pair2] = 1
 *                     if weight_dict.count(node_pair2):             # <<<<<<<<<<<<<<
 *                         weight_dict[node_pair2][node_pair1] += 1
 *                     else:
 */
            goto __pyx_L25;
          }

          /* "_smatch.pyx":193
 *                         weight_dict[node_pair2][node_pair1] += 1
 *                     else:
 *                         weight_dict[node_pair2][-1] = 0             # <<<<<<<<<<<<<<
 *                         weight_dict[node_pair2][node_pair1] = 1
 *                 else:
 */
          /*else*/ {
            ((__pyx_v_weight_dict[__pyx_v_node_pair2])[-1]) = 0;

            /* "_smatch.pyx":194
 *                     else:
 *                         weight_dict[node_pair2][-1] = 0
 *                         weight_dict[node_pair2][node_pair1] = 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     # two node pairs are the same. So we only update weight_dict once.
 */
            ((__pyx_v_weight_dict[__pyx_v_node_pair2])[__pyx_v_node_pair1]) = 1;
          }
          __pyx_L25:;

          /* "_smatch.pyx":177
 *                 node_pair1 = _hash_pair(node1_index_amr1, node1_index_amr2)
 *                 node_pair2 = _hash_pair(node2_index_amr1, node2_index_amr2)
 *                 if node_pair2 != node_pair1:             # <<<<<<<<<<<<<<
 *                     # update weight_dict weight. Note that we need to update both entries for future search
 *                     # i.e weight_dict[node_pair1][node_pair2]
 */
          goto __pyx_L22;
        }

        /* "_smatch.pyx":198
 *                     # two node pairs are the same. So we only update weight_dict once.
 *                     # this generally should not happen.
 *                     weight_dict[node_pair1][-1] += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __pyx_t_16 = __pyx_v_node_pair1;
          __pyx_t_17 = -1;
          ((__pyx_v_weight_dict[__pyx_t_16])[__pyx_t_17]) = (((__pyx_v_weight_dict[__pyx_t_16])[__pyx_t_17]) + 1);
        }
        __pyx_L22:;

        /* "_smatch.pyx":167
 *         for j in range(0, len(relation2)):
 *             # if both relation share the same name
 *             if relation1[i][0].lower() == relation2[j][0].lower():             # <<<<<<<<<<<<<<
 *                 node1_index_amr1 = int(relation1[i][1][len(prefix1):])
 *                 node1_index_amr2 = int(relation2[j][1][len(prefix2):])
 */
      }
    }
  }

  /* "_smatch.pyx":104
 * 
 * @cython.boundscheck(False)
 * cdef void compute_pool(instance1, attribute1, relation1,             # <<<<<<<<<<<<<<
 *                        instance2, attribute2, relation2,
 *                        prefix1, prefix2,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("_smatch.compute_pool", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node1_index);
  __Pyx_XDECREF(__pyx_v_node2_index);
  __Pyx_XDECREF(__pyx_v_node1_index_amr1);
  __Pyx_XDECREF(__pyx_v_node1_index_amr2);
  __Pyx_XDECREF(__pyx_v_node2_index_amr1);
  __Pyx_XDECREF(__pyx_v_node2_index_amr2);
  __Pyx_RefNannyFinishContext();
}

/* "_smatch.pyx":202
 * 
 * @cython.boundscheck(False)
 * cdef int compute_match(const vector[int] & mapping,             # <<<<<<<<<<<<<<
 *                        unordered_map[int, unordered_map[int, int]] & weight_dict,
 *                        verbose=False):
 */

static int __pyx_f_7_smatch_compute_match(std::vector<int>  const &__pyx_v_mapping, std::unordered_map<int,std::unordered_map<int,int> >  &__pyx_v_weight_dict, struct __pyx_opt_args_7_smatch_compute_match *__pyx_optional_args) {

  /* "_smatch.pyx":204
 * cdef int compute_match(const vector[int] & mapping,
 *                        unordered_map[int, unordered_map[int, int]] & weight_dict,
 *                        verbose=False):             # <<<<<<<<<<<<<<
 *     """
 *     Given a node mapping, compute match number based on weight_dict.
 */
  PyObject *__pyx_v_verbose = ((PyObject *)Py_False);
  PyObject *__pyx_v_match_num = 0;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_m = NULL;
  int __pyx_v_current_node_pair;
  std::pair<int,int>  __pyx_v_key;
  int __pyx_v_first;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  std::unordered_map<int,int> ::iterator __pyx_t_11;
  std::unordered_map<int,int>  *__pyx_t_12;
  std::pair<int,int>  __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  __Pyx_RefNannySetupContext("compute_match", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_verbose = __pyx_optional_args->verbose;
    }
  }

  /* "_smatch.pyx":215
 *     """
 *     # If this mapping has been investigated before, retrieve the value instead of re-computing.
 *     if verbose:             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, "Computing match for mapping"
 *         print >> DEBUG_LOG, mapping
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 215, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "_smatch.pyx":216
 *     # If this mapping has been investigated before, retrieve the value instead of re-computing.
 *     if verbose:
 *         print >> DEBUG_LOG, "Computing match for mapping"             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, mapping
 *     cdef match_num = 0
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PrintOne(__pyx_t_2, __pyx_kp_s_Computing_match_for_mapping) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_smatch.pyx":217
 *     if verbose:
 *         print >> DEBUG_LOG, "Computing match for mapping"
 *         print >> DEBUG_LOG, mapping             # <<<<<<<<<<<<<<
 *     cdef match_num = 0
 *     # i is node index in AMR 1, m is node index in AMR 2
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_PrintOne(__pyx_t_2, __pyx_t_3) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_smatch.pyx":215
 *     """
 *     # If this mapping has been investigated before, retrieve the value instead of re-computing.
 *     if verbose:             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, "Computing match for mapping"
 *         print >> DEBUG_LOG, mapping
 */
  }

  /* "_smatch.pyx":218
 *         print >> DEBUG_LOG, "Computing match for mapping"
 *         print >> DEBUG_LOG, mapping
 *     cdef match_num = 0             # <<<<<<<<<<<<<<
 *     # i is node index in AMR 1, m is node index in AMR 2
 *     for i, m in enumerate(mapping):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_match_num = __pyx_int_0;

  /* "_smatch.pyx":220
 *     cdef match_num = 0
 *     # i is node index in AMR 1, m is node index in AMR 2
 *     for i, m in enumerate(mapping):             # <<<<<<<<<<<<<<
 *         if m == -1:
 *             # no node maps to this node
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 220, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 220, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 220, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 220, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_m, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "_smatch.pyx":221
 *     # i is node index in AMR 1, m is node index in AMR 2
 *     for i, m in enumerate(mapping):
 *         if m == -1:             # <<<<<<<<<<<<<<
 *             # no node maps to this node
 *             continue
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_m, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "_smatch.pyx":223
 *         if m == -1:
 *             # no node maps to this node
 *             continue             # <<<<<<<<<<<<<<
 *         # node i in AMR 1 maps to node m in AMR 2
 *         current_node_pair = _hash_pair(i, m)
 */
      goto __pyx_L4_continue;

      /* "_smatch.pyx":221
 *     # i is node index in AMR 1, m is node index in AMR 2
 *     for i, m in enumerate(mapping):
 *         if m == -1:             # <<<<<<<<<<<<<<
 *             # no node maps to this node
 *             continue
 */
    }

    /* "_smatch.pyx":225
 *             continue
 *         # node i in AMR 1 maps to node m in AMR 2
 *         current_node_pair = _hash_pair(i, m)             # <<<<<<<<<<<<<<
 *         if weight_dict.count(current_node_pair) == 0:
 *             continue
 */
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_m); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L1_error)
    __pyx_v_current_node_pair = _hash_pair(__pyx_t_7, __pyx_t_8);

    /* "_smatch.pyx":226
 *         # node i in AMR 1 maps to node m in AMR 2
 *         current_node_pair = _hash_pair(i, m)
 *         if weight_dict.count(current_node_pair) == 0:             # <<<<<<<<<<<<<<
 *             continue
 *         if verbose:
 */
    __pyx_t_1 = ((__pyx_v_weight_dict.count(__pyx_v_current_node_pair) == 0) != 0);
    if (__pyx_t_1) {

      /* "_smatch.pyx":227
 *         current_node_pair = _hash_pair(i, m)
 *         if weight_dict.count(current_node_pair) == 0:
 *             continue             # <<<<<<<<<<<<<<
 *         if verbose:
 *             print >> DEBUG_LOG, "node_pair", current_node_pair
 */
      goto __pyx_L4_continue;

      /* "_smatch.pyx":226
 *         # node i in AMR 1 maps to node m in AMR 2
 *         current_node_pair = _hash_pair(i, m)
 *         if weight_dict.count(current_node_pair) == 0:             # <<<<<<<<<<<<<<
 *             continue
 *         if verbose:
 */
    }

    /* "_smatch.pyx":228
 *         if weight_dict.count(current_node_pair) == 0:
 *             continue
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "node_pair", current_node_pair
 *         for key in weight_dict[current_node_pair]:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 228, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "_smatch.pyx":229
 *             continue
 *         if verbose:
 *             print >> DEBUG_LOG, "node_pair", current_node_pair             # <<<<<<<<<<<<<<
 *         for key in weight_dict[current_node_pair]:
 *             if key.first == -1:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_current_node_pair); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_n_s_node_pair);
      __Pyx_GIVEREF(__pyx_n_s_node_pair);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_node_pair);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_9 = 0;
      if (__Pyx_Print(__pyx_t_3, __pyx_t_10, 1) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "_smatch.pyx":228
 *         if weight_dict.count(current_node_pair) == 0:
 *             continue
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "node_pair", current_node_pair
 *         for key in weight_dict[current_node_pair]:
 */
    }

    /* "_smatch.pyx":230
 *         if verbose:
 *             print >> DEBUG_LOG, "node_pair", current_node_pair
 *         for key in weight_dict[current_node_pair]:             # <<<<<<<<<<<<<<
 *             if key.first == -1:
 *                 # matching triple resulting from instance/attribute triples
 */
    __pyx_t_12 = &(__pyx_v_weight_dict[__pyx_v_current_node_pair]);
    __pyx_t_11 = __pyx_t_12->begin();
    for (;;) {
      if (!(__pyx_t_11 != __pyx_t_12->end())) break;
      __pyx_t_13 = *__pyx_t_11;
      ++__pyx_t_11;
      __pyx_v_key = __pyx_t_13;

      /* "_smatch.pyx":231
 *             print >> DEBUG_LOG, "node_pair", current_node_pair
 *         for key in weight_dict[current_node_pair]:
 *             if key.first == -1:             # <<<<<<<<<<<<<<
 *                 # matching triple resulting from instance/attribute triples
 *                 match_num += key.second
 */
      __pyx_t_1 = ((__pyx_v_key.first == -1L) != 0);
      if (__pyx_t_1) {

        /* "_smatch.pyx":233
 *             if key.first == -1:
 *                 # matching triple resulting from instance/attribute triples
 *                 match_num += key.second             # <<<<<<<<<<<<<<
 *                 if verbose:
 *                     print >> DEBUG_LOG, "instance/attribute match", key.second
 */
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_key.second); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 233, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = PyNumber_InPlaceAdd(__pyx_v_match_num, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 233, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF_SET(__pyx_v_match_num, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "_smatch.pyx":234
 *                 # matching triple resulting from instance/attribute triples
 *                 match_num += key.second
 *                 if verbose:             # <<<<<<<<<<<<<<
 *                     print >> DEBUG_LOG, "instance/attribute match", key.second
 *                 continue
 */
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 234, __pyx_L1_error)
        if (__pyx_t_1) {

          /* "_smatch.pyx":235
 *                 match_num += key.second
 *                 if verbose:
 *                     print >> DEBUG_LOG, "instance/attribute match", key.second             # <<<<<<<<<<<<<<
 *                 continue
 *             # only consider node index larger than i to avoid duplicates
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 235, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_key.second); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 235, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_kp_s_instance_attribute_match);
          __Pyx_GIVEREF(__pyx_kp_s_instance_attribute_match);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_s_instance_attribute_match);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
          __pyx_t_3 = 0;
          if (__Pyx_Print(__pyx_t_10, __pyx_t_9, 1) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "_smatch.pyx":234
 *                 # matching triple resulting from instance/attribute triples
 *                 match_num += key.second
 *                 if verbose:             # <<<<<<<<<<<<<<
 *                     print >> DEBUG_LOG, "instance/attribute match", key.second
 *                 continue
 */
        }

        /* "_smatch.pyx":236
 *                 if verbose:
 *                     print >> DEBUG_LOG, "instance/attribute match", key.second
 *                 continue             # <<<<<<<<<<<<<<
 *             # only consider node index larger than i to avoid duplicates
 *             # as we store both weight_dict[node_pair1][node_pair2] and
 */
        goto __pyx_L9_continue;

        /* "_smatch.pyx":231
 *             print >> DEBUG_LOG, "node_pair", current_node_pair
 *         for key in weight_dict[current_node_pair]:
 *             if key.first == -1:             # <<<<<<<<<<<<<<
 *                 # matching triple resulting from instance/attribute triples
 *                 match_num += key.second
 */
      }

      /* "_smatch.pyx":240
 *             # as we store both weight_dict[node_pair1][node_pair2] and
 *             #     weight_dict[node_pair2][node_pair1] for a relation
 *             first = _get_0(key.first)             # <<<<<<<<<<<<<<
 *             if first < i:
 *                 continue
 */
      __pyx_v_first = _get_0(__pyx_v_key.first);

      /* "_smatch.pyx":241
 *             #     weight_dict[node_pair2][node_pair1] for a relation
 *             first = _get_0(key.first)
 *             if first < i:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif mapping[first] == _get_1(key.first):
 */
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_first); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_10, __pyx_v_i, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_1) {

        /* "_smatch.pyx":242
 *             first = _get_0(key.first)
 *             if first < i:
 *                 continue             # <<<<<<<<<<<<<<
 *             elif mapping[first] == _get_1(key.first):
 *                 match_num += key.second
 */
        goto __pyx_L9_continue;

        /* "_smatch.pyx":241
 *             #     weight_dict[node_pair2][node_pair1] for a relation
 *             first = _get_0(key.first)
 *             if first < i:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif mapping[first] == _get_1(key.first):
 */
      }

      /* "_smatch.pyx":243
 *             if first < i:
 *                 continue
 *             elif mapping[first] == _get_1(key.first):             # <<<<<<<<<<<<<<
 *                 match_num += key.second
 *                 if verbose:
 */
      __pyx_t_1 = (((__pyx_v_mapping[__pyx_v_first]) == _get_1(__pyx_v_key.first)) != 0);
      if (__pyx_t_1) {

        /* "_smatch.pyx":244
 *                 continue
 *             elif mapping[first] == _get_1(key.first):
 *                 match_num += key.second             # <<<<<<<<<<<<<<
 *                 if verbose:
 *                     print >> DEBUG_LOG, "relation match with", key, key.second
 */
        __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_key.second); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 244, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyNumber_InPlaceAdd(__pyx_v_match_num, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 244, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF_SET(__pyx_v_match_num, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "_smatch.pyx":245
 *             elif mapping[first] == _get_1(key.first):
 *                 match_num += key.second
 *                 if verbose:             # <<<<<<<<<<<<<<
 *                     print >> DEBUG_LOG, "relation match with", key, key.second
 *     if verbose:
 */
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 245, __pyx_L1_error)
        if (__pyx_t_1) {

          /* "_smatch.pyx":246
 *                 match_num += key.second
 *                 if verbose:
 *                     print >> DEBUG_LOG, "relation match with", key, key.second             # <<<<<<<<<<<<<<
 *     if verbose:
 *         print >> DEBUG_LOG, "match computing complete, result:", match_num
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 246, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = __pyx_convert_pair_to_py_int____int(__pyx_v_key); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 246, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_key.second); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_14 = PyTuple_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 246, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_kp_s_relation_match_with);
          __Pyx_GIVEREF(__pyx_kp_s_relation_match_with);
          PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_kp_s_relation_match_with);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_t_3);
          __pyx_t_9 = 0;
          __pyx_t_3 = 0;
          if (__Pyx_Print(__pyx_t_10, __pyx_t_14, 1) < 0) __PYX_ERR(0, 246, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "_smatch.pyx":245
 *             elif mapping[first] == _get_1(key.first):
 *                 match_num += key.second
 *                 if verbose:             # <<<<<<<<<<<<<<
 *                     print >> DEBUG_LOG, "relation match with", key, key.second
 *     if verbose:
 */
        }

        /* "_smatch.pyx":243
 *             if first < i:
 *                 continue
 *             elif mapping[first] == _get_1(key.first):             # <<<<<<<<<<<<<<
 *                 match_num += key.second
 *                 if verbose:
 */
      }

      /* "_smatch.pyx":230
 *         if verbose:
 *             print >> DEBUG_LOG, "node_pair", current_node_pair
 *         for key in weight_dict[current_node_pair]:             # <<<<<<<<<<<<<<
 *             if key.first == -1:
 *                 # matching triple resulting from instance/attribute triples
 */
      __pyx_L9_continue:;
    }

    /* "_smatch.pyx":220
 *     cdef match_num = 0
 *     # i is node index in AMR 1, m is node index in AMR 2
 *     for i, m in enumerate(mapping):             # <<<<<<<<<<<<<<
 *         if m == -1:
 *             # no node maps to this node
 */
    __pyx_L4_continue:;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_smatch.pyx":247
 *                 if verbose:
 *                     print >> DEBUG_LOG, "relation match with", key, key.second
 *     if verbose:             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, "match computing complete, result:", match_num
 *     return match_num
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 247, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "_smatch.pyx":248
 *                     print >> DEBUG_LOG, "relation match with", key, key.second
 *     if verbose:
 *         print >> DEBUG_LOG, "match computing complete, result:", match_num             # <<<<<<<<<<<<<<
 *     return match_num
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_kp_s_match_computing_complete_result);
    __Pyx_GIVEREF(__pyx_kp_s_match_computing_complete_result);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_match_computing_complete_result);
    __Pyx_INCREF(__pyx_v_match_num);
    __Pyx_GIVEREF(__pyx_v_match_num);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_match_num);
    if (__Pyx_Print(__pyx_t_2, __pyx_t_4, 1) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_smatch.pyx":247
 *                 if verbose:
 *                     print >> DEBUG_LOG, "relation match with", key, key.second
 *     if verbose:             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, "match computing complete, result:", match_num
 *     return match_num
 */
  }

  /* "_smatch.pyx":249
 *     if verbose:
 *         print >> DEBUG_LOG, "match computing complete, result:", match_num
 *     return match_num             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_match_num); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_r = __pyx_t_8;
  goto __pyx_L0;

  /* "_smatch.pyx":202
 * 
 * @cython.boundscheck(False)
 * cdef int compute_match(const vector[int] & mapping,             # <<<<<<<<<<<<<<
 *                        unordered_map[int, unordered_map[int, int]] & weight_dict,
 *                        verbose=False):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_WriteUnraisable("_smatch.compute_match", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_match_num);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_smatch.pyx":253
 * 
 * @cython.boundscheck(False)
 * cdef int get_best_gain(vector[int] & mapping,             # <<<<<<<<<<<<<<
 *                        vector[unordered_set[int]] & candidate_mappings,
 *                        unordered_map[int, unordered_map[int, int]] & weight_dict,
 */

static int __pyx_f_7_smatch_get_best_gain(std::vector<int>  &__pyx_v_mapping, std::vector<std::unordered_set<int> >  &__pyx_v_candidate_mappings, std::unordered_map<int,std::unordered_map<int,int> >  &__pyx_v_weight_dict, int __pyx_v_instance_len, int __pyx_v_cur_match_num, std::vector<int>  &__pyx_v_cur_mapping, struct __pyx_opt_args_7_smatch_get_best_gain *__pyx_optional_args) {

  /* "_smatch.pyx":258
 *                        int instance_len,
 *                        int cur_match_num,
 *                        vector[int] & cur_mapping, verbose=False):             # <<<<<<<<<<<<<<
 *     """
 *     Hill-climbing method to return the best gain swap/move can get
 */
  PyObject *__pyx_v_verbose = ((PyObject *)Py_False);
  int __pyx_v_largest_gain;
  int __pyx_v_mv_gain;
  int __pyx_v_sw_gain;
  int __pyx_v_use_swap;
  int __pyx_v_node1;
  int __pyx_v_node2;
  PyObject *__pyx_v_unmatched = NULL;
  PyObject *__pyx_v_nid = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_nm = NULL;
  PyObject *__pyx_v_new_mapping = NULL;
  int __pyx_v_new_match_num;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_j = NULL;
  int __pyx_v_m2;
  int __pyx_v_temp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::vector<int> ::iterator __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  std::vector<std::unordered_set<int> > ::size_type __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  int __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  std::vector<int>  __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *(*__pyx_t_23)(PyObject *);
  std::vector<int> ::size_type __pyx_t_24;
  __Pyx_RefNannySetupContext("get_best_gain", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_verbose = __pyx_optional_args->verbose;
    }
  }

  /* "_smatch.pyx":271
 * 
 *     """
 *     cdef int largest_gain = 0             # <<<<<<<<<<<<<<
 *     cdef int mv_gain = 0
 *     cdef int sw_gain = 0
 */
  __pyx_v_largest_gain = 0;

  /* "_smatch.pyx":272
 *     """
 *     cdef int largest_gain = 0
 *     cdef int mv_gain = 0             # <<<<<<<<<<<<<<
 *     cdef int sw_gain = 0
 *     cur_mapping.clear()
 */
  __pyx_v_mv_gain = 0;

  /* "_smatch.pyx":273
 *     cdef int largest_gain = 0
 *     cdef int mv_gain = 0
 *     cdef int sw_gain = 0             # <<<<<<<<<<<<<<
 *     cur_mapping.clear()
 *     # True: using swap; False: using move
 */
  __pyx_v_sw_gain = 0;

  /* "_smatch.pyx":274
 *     cdef int mv_gain = 0
 *     cdef int sw_gain = 0
 *     cur_mapping.clear()             # <<<<<<<<<<<<<<
 *     # True: using swap; False: using move
 *     cdef bint use_swap = 1
 */
  __pyx_v_cur_mapping.clear();

  /* "_smatch.pyx":276
 *     cur_mapping.clear()
 *     # True: using swap; False: using move
 *     cdef bint use_swap = 1             # <<<<<<<<<<<<<<
 *     # the node to be moved/swapped
 *     cdef int node1 = -1
 */
  __pyx_v_use_swap = 1;

  /* "_smatch.pyx":278
 *     cdef bint use_swap = 1
 *     # the node to be moved/swapped
 *     cdef int node1 = -1             # <<<<<<<<<<<<<<
 *     # store the other node affected. In swap, this other node is the node swapping with node1. In move, this other
 *     # node is the node node1 will move to.
 */
  __pyx_v_node1 = -1;

  /* "_smatch.pyx":281
 *     # store the other node affected. In swap, this other node is the node swapping with node1. In move, this other
 *     # node is the node node1 will move to.
 *     cdef int node2 = -1             # <<<<<<<<<<<<<<
 *     # unmatched nodes in AMR 2
 *     unmatched = set(range(0, instance_len))
 */
  __pyx_v_node2 = -1;

  /* "_smatch.pyx":283
 *     cdef int node2 = -1
 *     # unmatched nodes in AMR 2
 *     unmatched = set(range(0, instance_len))             # <<<<<<<<<<<<<<
 *     # exclude nodes in current mapping
 *     # get unmatched nodes
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_instance_len); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_unmatched = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_smatch.pyx":286
 *     # exclude nodes in current mapping
 *     # get unmatched nodes
 *     for nid in mapping:             # <<<<<<<<<<<<<<
 *         if nid in unmatched:
 *             unmatched.remove(nid)
 */
  __pyx_t_3 = __pyx_v_mapping.begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_v_mapping.end())) break;
    __pyx_t_4 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_nid, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "_smatch.pyx":287
 *     # get unmatched nodes
 *     for nid in mapping:
 *         if nid in unmatched:             # <<<<<<<<<<<<<<
 *             unmatched.remove(nid)
 *     for i, nid in enumerate(mapping):
 */
    __pyx_t_5 = (__Pyx_PySet_ContainsTF(__pyx_v_nid, __pyx_v_unmatched, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "_smatch.pyx":288
 *     for nid in mapping:
 *         if nid in unmatched:
 *             unmatched.remove(nid)             # <<<<<<<<<<<<<<
 *     for i, nid in enumerate(mapping):
 *         # current node i in AMR 1 maps to node nid in AMR 2
 */
      __pyx_t_7 = __Pyx_PySet_Remove(__pyx_v_unmatched, __pyx_v_nid); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 288, __pyx_L1_error)

      /* "_smatch.pyx":287
 *     # get unmatched nodes
 *     for nid in mapping:
 *         if nid in unmatched:             # <<<<<<<<<<<<<<
 *             unmatched.remove(nid)
 *     for i, nid in enumerate(mapping):
 */
    }

    /* "_smatch.pyx":286
 *     # exclude nodes in current mapping
 *     # get unmatched nodes
 *     for nid in mapping:             # <<<<<<<<<<<<<<
 *         if nid in unmatched:
 *             unmatched.remove(nid)
 */
  }

  /* "_smatch.pyx":289
 *         if nid in unmatched:
 *             unmatched.remove(nid)
 *     for i, nid in enumerate(mapping):             # <<<<<<<<<<<<<<
 *         # current node i in AMR 1 maps to node nid in AMR 2
 *         for nm in unmatched:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_8 = __pyx_t_1; __Pyx_INCREF(__pyx_t_8); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 289, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 289, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 289, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_10(__pyx_t_8);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 289, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_nid, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "_smatch.pyx":291
 *     for i, nid in enumerate(mapping):
 *         # current node i in AMR 1 maps to node nid in AMR 2
 *         for nm in unmatched:             # <<<<<<<<<<<<<<
 *             if candidate_mappings[i].count(nm):
 *                 # remap i to another unmatched node (move)
 */
    __pyx_t_11 = 0;
    __pyx_t_13 = __Pyx_set_iterator(__pyx_v_unmatched, 1, (&__pyx_t_12), (&__pyx_t_4)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_13;
    __pyx_t_13 = 0;
    while (1) {
      __pyx_t_14 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_12, &__pyx_t_11, &__pyx_t_13, __pyx_t_4);
      if (unlikely(__pyx_t_14 == 0)) break;
      if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_XDECREF_SET(__pyx_v_nm, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "_smatch.pyx":292
 *         # current node i in AMR 1 maps to node nid in AMR 2
 *         for nm in unmatched:
 *             if candidate_mappings[i].count(nm):             # <<<<<<<<<<<<<<
 *                 # remap i to another unmatched node (move)
 *                 # (i, m) -> (i, nm)
 */
      __pyx_t_15 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_15 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_nm); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
      __pyx_t_6 = ((__pyx_v_candidate_mappings[__pyx_t_15]).count(__pyx_t_14) != 0);
      if (__pyx_t_6) {

        /* "_smatch.pyx":295
 *                 # remap i to another unmatched node (move)
 *                 # (i, m) -> (i, nm)
 *                 if verbose:             # <<<<<<<<<<<<<<
 *                     print >> DEBUG_LOG, "Remap node", i, "from ", nid, "to", nm
 *                 mv_gain = move_gain(mapping, i, nid, nm, weight_dict, cur_match_num)
 */
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 295, __pyx_L1_error)
        if (__pyx_t_6) {

          /* "_smatch.pyx":296
 *                 # (i, m) -> (i, nm)
 *                 if verbose:
 *                     print >> DEBUG_LOG, "Remap node", i, "from ", nid, "to", nm             # <<<<<<<<<<<<<<
 *                 mv_gain = move_gain(mapping, i, nid, nm, weight_dict, cur_match_num)
 *                 if verbose:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 296, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_16 = PyTuple_New(6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 296, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_INCREF(__pyx_kp_s_Remap_node);
          __Pyx_GIVEREF(__pyx_kp_s_Remap_node);
          PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_s_Remap_node);
          __Pyx_INCREF(__pyx_v_i);
          __Pyx_GIVEREF(__pyx_v_i);
          PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_v_i);
          __Pyx_INCREF(__pyx_kp_s_from);
          __Pyx_GIVEREF(__pyx_kp_s_from);
          PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_kp_s_from);
          __Pyx_INCREF(__pyx_v_nid);
          __Pyx_GIVEREF(__pyx_v_nid);
          PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_v_nid);
          __Pyx_INCREF(__pyx_n_s_to);
          __Pyx_GIVEREF(__pyx_n_s_to);
          PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_n_s_to);
          __Pyx_INCREF(__pyx_v_nm);
          __Pyx_GIVEREF(__pyx_v_nm);
          PyTuple_SET_ITEM(__pyx_t_16, 5, __pyx_v_nm);
          if (__Pyx_Print(__pyx_t_13, __pyx_t_16, 1) < 0) __PYX_ERR(0, 296, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "_smatch.pyx":295
 *                 # remap i to another unmatched node (move)
 *                 # (i, m) -> (i, nm)
 *                 if verbose:             # <<<<<<<<<<<<<<
 *                     print >> DEBUG_LOG, "Remap node", i, "from ", nid, "to", nm
 *                 mv_gain = move_gain(mapping, i, nid, nm, weight_dict, cur_match_num)
 */
        }

        /* "_smatch.pyx":297
 *                 if verbose:
 *                     print >> DEBUG_LOG, "Remap node", i, "from ", nid, "to", nm
 *                 mv_gain = move_gain(mapping, i, nid, nm, weight_dict, cur_match_num)             # <<<<<<<<<<<<<<
 *                 if verbose:
 *                     print >> DEBUG_LOG, "Move gain:", mv_gain
 */
        __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L1_error)
        __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_nid); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L1_error)
        __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_nm); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L1_error)
        __pyx_v_mv_gain = move_gain(__pyx_v_mapping, __pyx_t_14, __pyx_t_17, __pyx_t_18, __pyx_v_weight_dict, __pyx_v_cur_match_num);

        /* "_smatch.pyx":298
 *                     print >> DEBUG_LOG, "Remap node", i, "from ", nid, "to", nm
 *                 mv_gain = move_gain(mapping, i, nid, nm, weight_dict, cur_match_num)
 *                 if verbose:             # <<<<<<<<<<<<<<
 *                     print >> DEBUG_LOG, "Move gain:", mv_gain
 *                     new_mapping = mapping[:]
 */
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 298, __pyx_L1_error)
        if (__pyx_t_6) {

          /* "_smatch.pyx":299
 *                 mv_gain = move_gain(mapping, i, nid, nm, weight_dict, cur_match_num)
 *                 if verbose:
 *                     print >> DEBUG_LOG, "Move gain:", mv_gain             # <<<<<<<<<<<<<<
 *                     new_mapping = mapping[:]
 *                     new_mapping[i] = nm
 */
          __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_mv_gain); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_19);
          __Pyx_INCREF(__pyx_kp_s_Move_gain);
          __Pyx_GIVEREF(__pyx_kp_s_Move_gain);
          PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_kp_s_Move_gain);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_16);
          __pyx_t_16 = 0;
          if (__Pyx_Print(__pyx_t_13, __pyx_t_19, 1) < 0) __PYX_ERR(0, 299, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "_smatch.pyx":300
 *                 if verbose:
 *                     print >> DEBUG_LOG, "Move gain:", mv_gain
 *                     new_mapping = mapping[:]             # <<<<<<<<<<<<<<
 *                     new_mapping[i] = nm
 *                     new_match_num = compute_match(new_mapping, weight_dict)
 */
          __pyx_t_13 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_19 = __Pyx_PyObject_GetSlice(__pyx_t_13, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_19);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (!(likely(PyBytes_CheckExact(__pyx_t_19))||((__pyx_t_19) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_19)->tp_name), 0))) __PYX_ERR(0, 300, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_new_mapping, ((PyObject*)__pyx_t_19));
          __pyx_t_19 = 0;

          /* "_smatch.pyx":301
 *                     print >> DEBUG_LOG, "Move gain:", mv_gain
 *                     new_mapping = mapping[:]
 *                     new_mapping[i] = nm             # <<<<<<<<<<<<<<
 *                     new_match_num = compute_match(new_mapping, weight_dict)
 *                     if new_match_num != cur_match_num + mv_gain:
 */
          if (unlikely(PyObject_SetItem(__pyx_v_new_mapping, __pyx_v_i, __pyx_v_nm) < 0)) __PYX_ERR(0, 301, __pyx_L1_error)

          /* "_smatch.pyx":302
 *                     new_mapping = mapping[:]
 *                     new_mapping[i] = nm
 *                     new_match_num = compute_match(new_mapping, weight_dict)             # <<<<<<<<<<<<<<
 *                     if new_match_num != cur_match_num + mv_gain:
 *                         print >> ERROR_LOG, mapping, new_mapping
 */
          __pyx_t_20 = __pyx_convert_vector_from_py_int(__pyx_v_new_mapping); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L1_error)
          __pyx_v_new_match_num = __pyx_f_7_smatch_compute_match(__pyx_t_20, __pyx_v_weight_dict, NULL);

          /* "_smatch.pyx":303
 *                     new_mapping[i] = nm
 *                     new_match_num = compute_match(new_mapping, weight_dict)
 *                     if new_match_num != cur_match_num + mv_gain:             # <<<<<<<<<<<<<<
 *                         print >> ERROR_LOG, mapping, new_mapping
 *                         print >> ERROR_LOG, "Inconsistency in computing: move gain", cur_match_num, mv_gain, \
 */
          __pyx_t_6 = ((__pyx_v_new_match_num != (__pyx_v_cur_match_num + __pyx_v_mv_gain)) != 0);
          if (__pyx_t_6) {

            /* "_smatch.pyx":304
 *                     new_match_num = compute_match(new_mapping, weight_dict)
 *                     if new_match_num != cur_match_num + mv_gain:
 *                         print >> ERROR_LOG, mapping, new_mapping             # <<<<<<<<<<<<<<
 *                         print >> ERROR_LOG, "Inconsistency in computing: move gain", cur_match_num, mv_gain, \
 *                             new_match_num
 */
            __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_ERROR_LOG); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 304, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_19);
            __pyx_t_13 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 304, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 304, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_13);
            __Pyx_INCREF(__pyx_v_new_mapping);
            __Pyx_GIVEREF(__pyx_v_new_mapping);
            PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_v_new_mapping);
            __pyx_t_13 = 0;
            if (__Pyx_Print(__pyx_t_19, __pyx_t_16, 1) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

            /* "_smatch.pyx":305
 *                     if new_match_num != cur_match_num + mv_gain:
 *                         print >> ERROR_LOG, mapping, new_mapping
 *                         print >> ERROR_LOG, "Inconsistency in computing: move gain", cur_match_num, mv_gain, \             # <<<<<<<<<<<<<<
 *                             new_match_num
 *                 if mv_gain > largest_gain:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_ERROR_LOG); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 305, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_19);
            __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_cur_match_num); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 305, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_mv_gain); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 305, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);

            /* "_smatch.pyx":306
 *                         print >> ERROR_LOG, mapping, new_mapping
 *                         print >> ERROR_LOG, "Inconsistency in computing: move gain", cur_match_num, mv_gain, \
 *                             new_match_num             # <<<<<<<<<<<<<<
 *                 if mv_gain > largest_gain:
 *                     largest_gain = mv_gain
 */
            __pyx_t_21 = __Pyx_PyInt_From_int(__pyx_v_new_match_num); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 306, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);

            /* "_smatch.pyx":305
 *                     if new_match_num != cur_match_num + mv_gain:
 *                         print >> ERROR_LOG, mapping, new_mapping
 *                         print >> ERROR_LOG, "Inconsistency in computing: move gain", cur_match_num, mv_gain, \             # <<<<<<<<<<<<<<
 *                             new_match_num
 *                 if mv_gain > largest_gain:
 */
            __pyx_t_22 = PyTuple_New(4); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 305, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_22);
            __Pyx_INCREF(__pyx_kp_s_Inconsistency_in_computing_move);
            __Pyx_GIVEREF(__pyx_kp_s_Inconsistency_in_computing_move);
            PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_kp_s_Inconsistency_in_computing_move);
            __Pyx_GIVEREF(__pyx_t_16);
            PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_16);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_22, 2, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_21);
            PyTuple_SET_ITEM(__pyx_t_22, 3, __pyx_t_21);
            __pyx_t_16 = 0;
            __pyx_t_13 = 0;
            __pyx_t_21 = 0;
            if (__Pyx_Print(__pyx_t_19, __pyx_t_22, 1) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

            /* "_smatch.pyx":303
 *                     new_mapping[i] = nm
 *                     new_match_num = compute_match(new_mapping, weight_dict)
 *                     if new_match_num != cur_match_num + mv_gain:             # <<<<<<<<<<<<<<
 *                         print >> ERROR_LOG, mapping, new_mapping
 *                         print >> ERROR_LOG, "Inconsistency in computing: move gain", cur_match_num, mv_gain, \
 */
          }

          /* "_smatch.pyx":298
 *                     print >> DEBUG_LOG, "Remap node", i, "from ", nid, "to", nm
 *                 mv_gain = move_gain(mapping, i, nid, nm, weight_dict, cur_match_num)
 *                 if verbose:             # <<<<<<<<<<<<<<
 *                     print >> DEBUG_LOG, "Move gain:", mv_gain
 *                     new_mapping = mapping[:]
 */
        }

        /* "_smatch.pyx":307
 *                         print >> ERROR_LOG, "Inconsistency in computing: move gain", cur_match_num, mv_gain, \
 *                             new_match_num
 *                 if mv_gain > largest_gain:             # <<<<<<<<<<<<<<
 *                     largest_gain = mv_gain
 *                     node1 = i
 */
        __pyx_t_6 = ((__pyx_v_mv_gain > __pyx_v_largest_gain) != 0);
        if (__pyx_t_6) {

          /* "_smatch.pyx":308
 *                             new_match_num
 *                 if mv_gain > largest_gain:
 *                     largest_gain = mv_gain             # <<<<<<<<<<<<<<
 *                     node1 = i
 *                     node2 = nm
 */
          __pyx_v_largest_gain = __pyx_v_mv_gain;

          /* "_smatch.pyx":309
 *                 if mv_gain > largest_gain:
 *                     largest_gain = mv_gain
 *                     node1 = i             # <<<<<<<<<<<<<<
 *                     node2 = nm
 *                     use_swap = 0
 */
          __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
          __pyx_v_node1 = __pyx_t_18;

          /* "_smatch.pyx":310
 *                     largest_gain = mv_gain
 *                     node1 = i
 *                     node2 = nm             # <<<<<<<<<<<<<<
 *                     use_swap = 0
 *     # compute swap gain
 */
          __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_nm); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
          __pyx_v_node2 = __pyx_t_18;

          /* "_smatch.pyx":311
 *                     node1 = i
 *                     node2 = nm
 *                     use_swap = 0             # <<<<<<<<<<<<<<
 *     # compute swap gain
 *     for i, m in enumerate(mapping):
 */
          __pyx_v_use_swap = 0;

          /* "_smatch.pyx":307
 *                         print >> ERROR_LOG, "Inconsistency in computing: move gain", cur_match_num, mv_gain, \
 *                             new_match_num
 *                 if mv_gain > largest_gain:             # <<<<<<<<<<<<<<
 *                     largest_gain = mv_gain
 *                     node1 = i
 */
        }

        /* "_smatch.pyx":292
 *         # current node i in AMR 1 maps to node nid in AMR 2
 *         for nm in unmatched:
 *             if candidate_mappings[i].count(nm):             # <<<<<<<<<<<<<<
 *                 # remap i to another unmatched node (move)
 *                 # (i, m) -> (i, nm)
 */
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_smatch.pyx":289
 *         if nid in unmatched:
 *             unmatched.remove(nid)
 *     for i, nid in enumerate(mapping):             # <<<<<<<<<<<<<<
 *         # current node i in AMR 1 maps to node nid in AMR 2
 *         for nm in unmatched:
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_smatch.pyx":313
 *                     use_swap = 0
 *     # compute swap gain
 *     for i, m in enumerate(mapping):             # <<<<<<<<<<<<<<
 *         for j in range(i+1, len(mapping)):
 *             m2 = mapping[j]
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_8 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_1 = __pyx_t_8; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 313, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 313, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 313, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 313, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 313, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_10(__pyx_t_1);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 313, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_m, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "_smatch.pyx":314
 *     # compute swap gain
 *     for i, m in enumerate(mapping):
 *         for j in range(i+1, len(mapping)):             # <<<<<<<<<<<<<<
 *             m2 = mapping[j]
 *             # swap operation (i, m) (j, m2) -> (i, m2) (j, m)
 */
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_19 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_12 = PyObject_Length(__pyx_t_19); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = PyInt_FromSsize_t(__pyx_t_12); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_22 = PyTuple_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_19);
    PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_19);
    __pyx_t_8 = 0;
    __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_22, NULL); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    if (likely(PyList_CheckExact(__pyx_t_19)) || PyTuple_CheckExact(__pyx_t_19)) {
      __pyx_t_22 = __pyx_t_19; __Pyx_INCREF(__pyx_t_22); __pyx_t_12 = 0;
      __pyx_t_23 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_22 = PyObject_GetIter(__pyx_t_19); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __pyx_t_23 = Py_TYPE(__pyx_t_22)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 314, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    for (;;) {
      if (likely(!__pyx_t_23)) {
        if (likely(PyList_CheckExact(__pyx_t_22))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_22)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_19 = PyList_GET_ITEM(__pyx_t_22, __pyx_t_12); __Pyx_INCREF(__pyx_t_19); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 314, __pyx_L1_error)
          #else
          __pyx_t_19 = PySequence_ITEM(__pyx_t_22, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 314, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_19);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_22)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_19 = PyTuple_GET_ITEM(__pyx_t_22, __pyx_t_12); __Pyx_INCREF(__pyx_t_19); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 314, __pyx_L1_error)
          #else
          __pyx_t_19 = PySequence_ITEM(__pyx_t_22, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 314, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_19);
          #endif
        }
      } else {
        __pyx_t_19 = __pyx_t_23(__pyx_t_22);
        if (unlikely(!__pyx_t_19)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 314, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_19);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_19);
      __pyx_t_19 = 0;

      /* "_smatch.pyx":315
 *     for i, m in enumerate(mapping):
 *         for j in range(i+1, len(mapping)):
 *             m2 = mapping[j]             # <<<<<<<<<<<<<<
 *             # swap operation (i, m) (j, m2) -> (i, m2) (j, m)
 *             # j starts from i+1, to avoid duplicate swap
 */
      __pyx_t_24 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_24 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 315, __pyx_L1_error)
      __pyx_v_m2 = (__pyx_v_mapping[__pyx_t_24]);

      /* "_smatch.pyx":318
 *             # swap operation (i, m) (j, m2) -> (i, m2) (j, m)
 *             # j starts from i+1, to avoid duplicate swap
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Swap node", i, "and", j
 *                 print >> DEBUG_LOG, "Before swapping:", i, "-", m, ",", j, "-", m2
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 318, __pyx_L1_error)
      if (__pyx_t_6) {

        /* "_smatch.pyx":319
 *             # j starts from i+1, to avoid duplicate swap
 *             if verbose:
 *                 print >> DEBUG_LOG, "Swap node", i, "and", j             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Before swapping:", i, "-", m, ",", j, "-", m2
 *                 print >> DEBUG_LOG, mapping
 */
        __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_kp_s_Swap_node);
        __Pyx_GIVEREF(__pyx_kp_s_Swap_node);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_s_Swap_node);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_i);
        __Pyx_INCREF(__pyx_n_s_and);
        __Pyx_GIVEREF(__pyx_n_s_and);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_n_s_and);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_v_j);
        if (__Pyx_Print(__pyx_t_19, __pyx_t_8, 1) < 0) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

        /* "_smatch.pyx":320
 *             if verbose:
 *                 print >> DEBUG_LOG, "Swap node", i, "and", j
 *                 print >> DEBUG_LOG, "Before swapping:", i, "-", m, ",", j, "-", m2             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, mapping
 *                 print >> DEBUG_LOG, "After swapping:", i, "-", m2, ",", j, "-", m
 */
        __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_m2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_21 = PyTuple_New(8); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        __Pyx_INCREF(__pyx_kp_s_Before_swapping);
        __Pyx_GIVEREF(__pyx_kp_s_Before_swapping);
        PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_kp_s_Before_swapping);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_v_i);
        __Pyx_INCREF(__pyx_kp_s__2);
        __Pyx_GIVEREF(__pyx_kp_s__2);
        PyTuple_SET_ITEM(__pyx_t_21, 2, __pyx_kp_s__2);
        __Pyx_INCREF(__pyx_v_m);
        __Pyx_GIVEREF(__pyx_v_m);
        PyTuple_SET_ITEM(__pyx_t_21, 3, __pyx_v_m);
        __Pyx_INCREF(__pyx_kp_s__3);
        __Pyx_GIVEREF(__pyx_kp_s__3);
        PyTuple_SET_ITEM(__pyx_t_21, 4, __pyx_kp_s__3);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_21, 5, __pyx_v_j);
        __Pyx_INCREF(__pyx_kp_s__2);
        __Pyx_GIVEREF(__pyx_kp_s__2);
        PyTuple_SET_ITEM(__pyx_t_21, 6, __pyx_kp_s__2);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_21, 7, __pyx_t_8);
        __pyx_t_8 = 0;
        if (__Pyx_Print(__pyx_t_19, __pyx_t_21, 1) < 0) __PYX_ERR(0, 320, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

        /* "_smatch.pyx":321
 *                 print >> DEBUG_LOG, "Swap node", i, "and", j
 *                 print >> DEBUG_LOG, "Before swapping:", i, "-", m, ",", j, "-", m2
 *                 print >> DEBUG_LOG, mapping             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "After swapping:", i, "-", m2, ",", j, "-", m
 *             sw_gain = swap_gain(mapping, i, m, j, m2, weight_dict, cur_match_num)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_21 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        if (__Pyx_PrintOne(__pyx_t_19, __pyx_t_21) < 0) __PYX_ERR(0, 321, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

        /* "_smatch.pyx":322
 *                 print >> DEBUG_LOG, "Before swapping:", i, "-", m, ",", j, "-", m2
 *                 print >> DEBUG_LOG, mapping
 *                 print >> DEBUG_LOG, "After swapping:", i, "-", m2, ",", j, "-", m             # <<<<<<<<<<<<<<
 *             sw_gain = swap_gain(mapping, i, m, j, m2, weight_dict, cur_match_num)
 *             if verbose:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_21 = __Pyx_PyInt_From_int(__pyx_v_m2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        __pyx_t_8 = PyTuple_New(8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_kp_s_After_swapping);
        __Pyx_GIVEREF(__pyx_kp_s_After_swapping);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_s_After_swapping);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_i);
        __Pyx_INCREF(__pyx_kp_s__2);
        __Pyx_GIVEREF(__pyx_kp_s__2);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_s__2);
        __Pyx_GIVEREF(__pyx_t_21);
        PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_21);
        __Pyx_INCREF(__pyx_kp_s__3);
        __Pyx_GIVEREF(__pyx_kp_s__3);
        PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_kp_s__3);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_v_j);
        __Pyx_INCREF(__pyx_kp_s__2);
        __Pyx_GIVEREF(__pyx_kp_s__2);
        PyTuple_SET_ITEM(__pyx_t_8, 6, __pyx_kp_s__2);
        __Pyx_INCREF(__pyx_v_m);
        __Pyx_GIVEREF(__pyx_v_m);
        PyTuple_SET_ITEM(__pyx_t_8, 7, __pyx_v_m);
        __pyx_t_21 = 0;
        if (__Pyx_Print(__pyx_t_19, __pyx_t_8, 1) < 0) __PYX_ERR(0, 322, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

        /* "_smatch.pyx":318
 *             # swap operation (i, m) (j, m2) -> (i, m2) (j, m)
 *             # j starts from i+1, to avoid duplicate swap
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Swap node", i, "and", j
 *                 print >> DEBUG_LOG, "Before swapping:", i, "-", m, ",", j, "-", m2
 */
      }

      /* "_smatch.pyx":323
 *                 print >> DEBUG_LOG, mapping
 *                 print >> DEBUG_LOG, "After swapping:", i, "-", m2, ",", j, "-", m
 *             sw_gain = swap_gain(mapping, i, m, j, m2, weight_dict, cur_match_num)             # <<<<<<<<<<<<<<
 *             if verbose:
 *                 print >> DEBUG_LOG, "Swap gain:", sw_gain
 */
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 323, __pyx_L1_error)
      __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_m); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 323, __pyx_L1_error)
      __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 323, __pyx_L1_error)
      __pyx_v_sw_gain = swap_gain(__pyx_v_mapping, __pyx_t_4, __pyx_t_18, __pyx_t_17, __pyx_v_m2, __pyx_v_weight_dict, __pyx_v_cur_match_num);

      /* "_smatch.pyx":324
 *                 print >> DEBUG_LOG, "After swapping:", i, "-", m2, ",", j, "-", m
 *             sw_gain = swap_gain(mapping, i, m, j, m2, weight_dict, cur_match_num)
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Swap gain:", sw_gain
 *                 new_mapping = mapping[:]
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 324, __pyx_L1_error)
      if (__pyx_t_6) {

        /* "_smatch.pyx":325
 *             sw_gain = swap_gain(mapping, i, m, j, m2, weight_dict, cur_match_num)
 *             if verbose:
 *                 print >> DEBUG_LOG, "Swap gain:", sw_gain             # <<<<<<<<<<<<<<
 *                 new_mapping = mapping[:]
 *                 new_mapping[i] = m2
 */
        __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_sw_gain); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_21 = PyTuple_New(2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        __Pyx_INCREF(__pyx_kp_s_Swap_gain);
        __Pyx_GIVEREF(__pyx_kp_s_Swap_gain);
        PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_kp_s_Swap_gain);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        if (__Pyx_Print(__pyx_t_19, __pyx_t_21, 1) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

        /* "_smatch.pyx":326
 *             if verbose:
 *                 print >> DEBUG_LOG, "Swap gain:", sw_gain
 *                 new_mapping = mapping[:]             # <<<<<<<<<<<<<<
 *                 new_mapping[i] = m2
 *                 new_mapping[j] = m
 */
        __pyx_t_19 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 326, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_t_19, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 326, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        if (!(likely(PyBytes_CheckExact(__pyx_t_21))||((__pyx_t_21) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_21)->tp_name), 0))) __PYX_ERR(0, 326, __pyx_L1_error)
        __Pyx_XDECREF_SET(__pyx_v_new_mapping, ((PyObject*)__pyx_t_21));
        __pyx_t_21 = 0;

        /* "_smatch.pyx":327
 *                 print >> DEBUG_LOG, "Swap gain:", sw_gain
 *                 new_mapping = mapping[:]
 *                 new_mapping[i] = m2             # <<<<<<<<<<<<<<
 *                 new_mapping[j] = m
 *                 print >> DEBUG_LOG, new_mapping
 */
        __pyx_t_21 = __Pyx_PyInt_From_int(__pyx_v_m2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        if (unlikely(PyObject_SetItem(__pyx_v_new_mapping, __pyx_v_i, __pyx_t_21) < 0)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

        /* "_smatch.pyx":328
 *                 new_mapping = mapping[:]
 *                 new_mapping[i] = m2
 *                 new_mapping[j] = m             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, new_mapping
 *                 new_match_num = compute_match(new_mapping, weight_dict)
 */
        if (unlikely(PyObject_SetItem(__pyx_v_new_mapping, __pyx_v_j, __pyx_v_m) < 0)) __PYX_ERR(0, 328, __pyx_L1_error)

        /* "_smatch.pyx":329
 *                 new_mapping[i] = m2
 *                 new_mapping[j] = m
 *                 print >> DEBUG_LOG, new_mapping             # <<<<<<<<<<<<<<
 *                 new_match_num = compute_match(new_mapping, weight_dict)
 *                 if new_match_num != cur_match_num + sw_gain:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        if (__Pyx_PrintOne(__pyx_t_21, __pyx_v_new_mapping) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

        /* "_smatch.pyx":330
 *                 new_mapping[j] = m
 *                 print >> DEBUG_LOG, new_mapping
 *                 new_match_num = compute_match(new_mapping, weight_dict)             # <<<<<<<<<<<<<<
 *                 if new_match_num != cur_match_num + sw_gain:
 *                     # print >> ERROR_LOG, match, new_match
 */
        __pyx_t_20 = __pyx_convert_vector_from_py_int(__pyx_v_new_mapping); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L1_error)
        __pyx_v_new_match_num = __pyx_f_7_smatch_compute_match(__pyx_t_20, __pyx_v_weight_dict, NULL);

        /* "_smatch.pyx":331
 *                 print >> DEBUG_LOG, new_mapping
 *                 new_match_num = compute_match(new_mapping, weight_dict)
 *                 if new_match_num != cur_match_num + sw_gain:             # <<<<<<<<<<<<<<
 *                     # print >> ERROR_LOG, match, new_match
 *                     print >> ERROR_LOG, "Inconsistency in computing: swap gain", cur_match_num, sw_gain, new_match_num
 */
        __pyx_t_6 = ((__pyx_v_new_match_num != (__pyx_v_cur_match_num + __pyx_v_sw_gain)) != 0);
        if (__pyx_t_6) {

          /* "_smatch.pyx":333
 *                 if new_match_num != cur_match_num + sw_gain:
 *                     # print >> ERROR_LOG, match, new_match
 *                     print >> ERROR_LOG, "Inconsistency in computing: swap gain", cur_match_num, sw_gain, new_match_num             # <<<<<<<<<<<<<<
 *             if sw_gain > largest_gain:
 *                 largest_gain = sw_gain
 */
          __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_ERROR_LOG); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 333, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_cur_match_num); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 333, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_sw_gain); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 333, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_new_match_num); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 333, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_16 = PyTuple_New(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 333, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_INCREF(__pyx_kp_s_Inconsistency_in_computing_swap);
          __Pyx_GIVEREF(__pyx_kp_s_Inconsistency_in_computing_swap);
          PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_s_Inconsistency_in_computing_swap);
          __Pyx_GIVEREF(__pyx_t_19);
          PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_19);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_13);
          __pyx_t_19 = 0;
          __pyx_t_8 = 0;
          __pyx_t_13 = 0;
          if (__Pyx_Print(__pyx_t_21, __pyx_t_16, 1) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

          /* "_smatch.pyx":331
 *                 print >> DEBUG_LOG, new_mapping
 *                 new_match_num = compute_match(new_mapping, weight_dict)
 *                 if new_match_num != cur_match_num + sw_gain:             # <<<<<<<<<<<<<<
 *                     # print >> ERROR_LOG, match, new_match
 *                     print >> ERROR_LOG, "Inconsistency in computing: swap gain", cur_match_num, sw_gain, new_match_num
 */
        }

        /* "_smatch.pyx":324
 *                 print >> DEBUG_LOG, "After swapping:", i, "-", m2, ",", j, "-", m
 *             sw_gain = swap_gain(mapping, i, m, j, m2, weight_dict, cur_match_num)
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Swap gain:", sw_gain
 *                 new_mapping = mapping[:]
 */
      }

      /* "_smatch.pyx":334
 *                     # print >> ERROR_LOG, match, new_match
 *                     print >> ERROR_LOG, "Inconsistency in computing: swap gain", cur_match_num, sw_gain, new_match_num
 *             if sw_gain > largest_gain:             # <<<<<<<<<<<<<<
 *                 largest_gain = sw_gain
 *                 node1 = i
 */
      __pyx_t_6 = ((__pyx_v_sw_gain > __pyx_v_largest_gain) != 0);
      if (__pyx_t_6) {

        /* "_smatch.pyx":335
 *                     print >> ERROR_LOG, "Inconsistency in computing: swap gain", cur_match_num, sw_gain, new_match_num
 *             if sw_gain > largest_gain:
 *                 largest_gain = sw_gain             # <<<<<<<<<<<<<<
 *                 node1 = i
 *                 node2 = j
 */
        __pyx_v_largest_gain = __pyx_v_sw_gain;

        /* "_smatch.pyx":336
 *             if sw_gain > largest_gain:
 *                 largest_gain = sw_gain
 *                 node1 = i             # <<<<<<<<<<<<<<
 *                 node2 = j
 *                 use_swap = 1
 */
        __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
        __pyx_v_node1 = __pyx_t_17;

        /* "_smatch.pyx":337
 *                 largest_gain = sw_gain
 *                 node1 = i
 *                 node2 = j             # <<<<<<<<<<<<<<
 *                 use_swap = 1
 *     # generate a new mapping based on swap/move
 */
        __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)
        __pyx_v_node2 = __pyx_t_17;

        /* "_smatch.pyx":338
 *                 node1 = i
 *                 node2 = j
 *                 use_swap = 1             # <<<<<<<<<<<<<<
 *     # generate a new mapping based on swap/move
 *     cur_mapping.assign(mapping.begin(), mapping.end())
 */
        __pyx_v_use_swap = 1;

        /* "_smatch.pyx":334
 *                     # print >> ERROR_LOG, match, new_match
 *                     print >> ERROR_LOG, "Inconsistency in computing: swap gain", cur_match_num, sw_gain, new_match_num
 *             if sw_gain > largest_gain:             # <<<<<<<<<<<<<<
 *                 largest_gain = sw_gain
 *                 node1 = i
 */
      }

      /* "_smatch.pyx":314
 *     # compute swap gain
 *     for i, m in enumerate(mapping):
 *         for j in range(i+1, len(mapping)):             # <<<<<<<<<<<<<<
 *             m2 = mapping[j]
 *             # swap operation (i, m) (j, m2) -> (i, m2) (j, m)
 */
    }
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

    /* "_smatch.pyx":313
 *                     use_swap = 0
 *     # compute swap gain
 *     for i, m in enumerate(mapping):             # <<<<<<<<<<<<<<
 *         for j in range(i+1, len(mapping)):
 *             m2 = mapping[j]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_smatch.pyx":340
 *                 use_swap = 1
 *     # generate a new mapping based on swap/move
 *     cur_mapping.assign(mapping.begin(), mapping.end())             # <<<<<<<<<<<<<<
 *     if node1 >= 0:
 *         if use_swap:
 */
  try {
    __pyx_v_cur_mapping.assign(__pyx_v_mapping.begin(), __pyx_v_mapping.end());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 340, __pyx_L1_error)
  }

  /* "_smatch.pyx":341
 *     # generate a new mapping based on swap/move
 *     cur_mapping.assign(mapping.begin(), mapping.end())
 *     if node1 >= 0:             # <<<<<<<<<<<<<<
 *         if use_swap:
 *             if verbose:
 */
  __pyx_t_6 = ((__pyx_v_node1 >= 0) != 0);
  if (__pyx_t_6) {

    /* "_smatch.pyx":342
 *     cur_mapping.assign(mapping.begin(), mapping.end())
 *     if node1 >= 0:
 *         if use_swap:             # <<<<<<<<<<<<<<
 *             if verbose:
 *                 print >> DEBUG_LOG, "Use swap gain"
 */
    __pyx_t_6 = (__pyx_v_use_swap != 0);
    if (__pyx_t_6) {

      /* "_smatch.pyx":343
 *     if node1 >= 0:
 *         if use_swap:
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Use swap gain"
 *             temp = cur_mapping[node1]
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 343, __pyx_L1_error)
      if (__pyx_t_6) {

        /* "_smatch.pyx":344
 *         if use_swap:
 *             if verbose:
 *                 print >> DEBUG_LOG, "Use swap gain"             # <<<<<<<<<<<<<<
 *             temp = cur_mapping[node1]
 *             cur_mapping[node1] = cur_mapping[node2]
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (__Pyx_PrintOne(__pyx_t_2, __pyx_kp_s_Use_swap_gain) < 0) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "_smatch.pyx":343
 *     if node1 >= 0:
 *         if use_swap:
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Use swap gain"
 *             temp = cur_mapping[node1]
 */
      }

      /* "_smatch.pyx":345
 *             if verbose:
 *                 print >> DEBUG_LOG, "Use swap gain"
 *             temp = cur_mapping[node1]             # <<<<<<<<<<<<<<
 *             cur_mapping[node1] = cur_mapping[node2]
 *             cur_mapping[node2] = temp
 */
      __pyx_v_temp = (__pyx_v_cur_mapping[__pyx_v_node1]);

      /* "_smatch.pyx":346
 *                 print >> DEBUG_LOG, "Use swap gain"
 *             temp = cur_mapping[node1]
 *             cur_mapping[node1] = cur_mapping[node2]             # <<<<<<<<<<<<<<
 *             cur_mapping[node2] = temp
 *         else:
 */
      (__pyx_v_cur_mapping[__pyx_v_node1]) = (__pyx_v_cur_mapping[__pyx_v_node2]);

      /* "_smatch.pyx":347
 *             temp = cur_mapping[node1]
 *             cur_mapping[node1] = cur_mapping[node2]
 *             cur_mapping[node2] = temp             # <<<<<<<<<<<<<<
 *         else:
 *             if verbose:
 */
      (__pyx_v_cur_mapping[__pyx_v_node2]) = __pyx_v_temp;

      /* "_smatch.pyx":342
 *     cur_mapping.assign(mapping.begin(), mapping.end())
 *     if node1 >= 0:
 *         if use_swap:             # <<<<<<<<<<<<<<
 *             if verbose:
 *                 print >> DEBUG_LOG, "Use swap gain"
 */
      goto __pyx_L24;
    }

    /* "_smatch.pyx":349
 *             cur_mapping[node2] = temp
 *         else:
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Use move gain"
 *             cur_mapping[node1] = node2
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 349, __pyx_L1_error)
      if (__pyx_t_6) {

        /* "_smatch.pyx":350
 *         else:
 *             if verbose:
 *                 print >> DEBUG_LOG, "Use move gain"             # <<<<<<<<<<<<<<
 *             cur_mapping[node1] = node2
 *     else:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (__Pyx_PrintOne(__pyx_t_2, __pyx_kp_s_Use_move_gain) < 0) __PYX_ERR(0, 350, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "_smatch.pyx":349
 *             cur_mapping[node2] = temp
 *         else:
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Use move gain"
 *             cur_mapping[node1] = node2
 */
      }

      /* "_smatch.pyx":351
 *             if verbose:
 *                 print >> DEBUG_LOG, "Use move gain"
 *             cur_mapping[node1] = node2             # <<<<<<<<<<<<<<
 *     else:
 *         if verbose:
 */
      (__pyx_v_cur_mapping[__pyx_v_node1]) = __pyx_v_node2;
    }
    __pyx_L24:;

    /* "_smatch.pyx":341
 *     # generate a new mapping based on swap/move
 *     cur_mapping.assign(mapping.begin(), mapping.end())
 *     if node1 >= 0:             # <<<<<<<<<<<<<<
 *         if use_swap:
 *             if verbose:
 */
    goto __pyx_L23;
  }

  /* "_smatch.pyx":353
 *             cur_mapping[node1] = node2
 *     else:
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "no move/swap gain found"
 *     if verbose:
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 353, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "_smatch.pyx":354
 *     else:
 *         if verbose:
 *             print >> DEBUG_LOG, "no move/swap gain found"             # <<<<<<<<<<<<<<
 *     if verbose:
 *         print >> DEBUG_LOG, "Original mapping", mapping
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_PrintOne(__pyx_t_2, __pyx_kp_s_no_move_swap_gain_found) < 0) __PYX_ERR(0, 354, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "_smatch.pyx":353
 *             cur_mapping[node1] = node2
 *     else:
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "no move/swap gain found"
 *     if verbose:
 */
    }
  }
  __pyx_L23:;

  /* "_smatch.pyx":355
 *         if verbose:
 *             print >> DEBUG_LOG, "no move/swap gain found"
 *     if verbose:             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, "Original mapping", mapping
 *         print >> DEBUG_LOG, "Current mapping", cur_mapping
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 355, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "_smatch.pyx":356
 *             print >> DEBUG_LOG, "no move/swap gain found"
 *     if verbose:
 *         print >> DEBUG_LOG, "Original mapping", mapping             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, "Current mapping", cur_mapping
 *     return largest_gain
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_22 = PyTuple_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_INCREF(__pyx_kp_s_Original_mapping);
    __Pyx_GIVEREF(__pyx_kp_s_Original_mapping);
    PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_kp_s_Original_mapping);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    if (__Pyx_Print(__pyx_t_2, __pyx_t_22, 1) < 0) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_smatch.pyx":357
 *     if verbose:
 *         print >> DEBUG_LOG, "Original mapping", mapping
 *         print >> DEBUG_LOG, "Current mapping", cur_mapping             # <<<<<<<<<<<<<<
 *     return largest_gain
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_22 = __pyx_convert_vector_to_py_int(__pyx_v_cur_mapping); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_s_Current_mapping);
    __Pyx_GIVEREF(__pyx_kp_s_Current_mapping);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_Current_mapping);
    __Pyx_GIVEREF(__pyx_t_22);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_22);
    __pyx_t_22 = 0;
    if (__Pyx_Print(__pyx_t_2, __pyx_t_1, 1) < 0) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_smatch.pyx":355
 *         if verbose:
 *             print >> DEBUG_LOG, "no move/swap gain found"
 *     if verbose:             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, "Original mapping", mapping
 *         print >> DEBUG_LOG, "Current mapping", cur_mapping
 */
  }

  /* "_smatch.pyx":358
 *         print >> DEBUG_LOG, "Original mapping", mapping
 *         print >> DEBUG_LOG, "Current mapping", cur_mapping
 *     return largest_gain             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_largest_gain;
  goto __pyx_L0;

  /* "_smatch.pyx":253
 * 
 * @cython.boundscheck(False)
 * cdef int get_best_gain(vector[int] & mapping,             # <<<<<<<<<<<<<<
 *                        vector[unordered_set[int]] & candidate_mappings,
 *                        unordered_map[int, unordered_map[int, int]] & weight_dict,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_WriteUnraisable("_smatch.get_best_gain", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_unmatched);
  __Pyx_XDECREF(__pyx_v_nid);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_nm);
  __Pyx_XDECREF(__pyx_v_new_mapping);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_smatch.pyx":362
 * 
 * @cython.boundscheck(False)
 * cdef void remove_zero_alignments(vector[int] & mapping,             # <<<<<<<<<<<<<<
 *                                  unordered_map[int, unordered_map[int, int]] & weight_dict):
 *     for i, m in enumerate(mapping):
 */

static void __pyx_f_7_smatch_remove_zero_alignments(std::vector<int>  &__pyx_v_mapping, std::unordered_map<int,std::unordered_map<int,int> >  &__pyx_v_weight_dict) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_match_num = NULL;
  int __pyx_v_current_node_pair;
  std::pair<int,int>  __pyx_v_key;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  std::unordered_map<int,int> ::iterator __pyx_t_9;
  std::unordered_map<int,int>  *__pyx_t_10;
  std::pair<int,int>  __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  std::vector<int> ::size_type __pyx_t_13;
  __Pyx_RefNannySetupContext("remove_zero_alignments", 0);

  /* "_smatch.pyx":364
 * cdef void remove_zero_alignments(vector[int] & mapping,
 *                                  unordered_map[int, unordered_map[int, int]] & weight_dict):
 *     for i, m in enumerate(mapping):             # <<<<<<<<<<<<<<
 *         match_num = 0
 *         if m == -1:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_mapping); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 364, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 364, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 364, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 364, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_m, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "_smatch.pyx":365
 *                                  unordered_map[int, unordered_map[int, int]] & weight_dict):
 *     for i, m in enumerate(mapping):
 *         match_num = 0             # <<<<<<<<<<<<<<
 *         if m == -1:
 *             # no node maps to this node
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_XDECREF_SET(__pyx_v_match_num, __pyx_int_0);

    /* "_smatch.pyx":366
 *     for i, m in enumerate(mapping):
 *         match_num = 0
 *         if m == -1:             # <<<<<<<<<<<<<<
 *             # no node maps to this node
 *             continue
 */
    __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_m, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {

      /* "_smatch.pyx":368
 *         if m == -1:
 *             # no node maps to this node
 *             continue             # <<<<<<<<<<<<<<
 *         # node i in AMR 1 maps to node m in AMR 2
 *         current_node_pair = _hash_pair(i, m)
 */
      goto __pyx_L3_continue;

      /* "_smatch.pyx":366
 *     for i, m in enumerate(mapping):
 *         match_num = 0
 *         if m == -1:             # <<<<<<<<<<<<<<
 *             # no node maps to this node
 *             continue
 */
    }

    /* "_smatch.pyx":370
 *             continue
 *         # node i in AMR 1 maps to node m in AMR 2
 *         current_node_pair = _hash_pair(i, m)             # <<<<<<<<<<<<<<
 *         if weight_dict.count(current_node_pair) == 0:
 *             continue
 */
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 370, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_m); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 370, __pyx_L1_error)
    __pyx_v_current_node_pair = _hash_pair(__pyx_t_7, __pyx_t_8);

    /* "_smatch.pyx":371
 *         # node i in AMR 1 maps to node m in AMR 2
 *         current_node_pair = _hash_pair(i, m)
 *         if weight_dict.count(current_node_pair) == 0:             # <<<<<<<<<<<<<<
 *             continue
 *         for key in weight_dict[current_node_pair]:
 */
    __pyx_t_6 = ((__pyx_v_weight_dict.count(__pyx_v_current_node_pair) == 0) != 0);
    if (__pyx_t_6) {

      /* "_smatch.pyx":372
 *         current_node_pair = _hash_pair(i, m)
 *         if weight_dict.count(current_node_pair) == 0:
 *             continue             # <<<<<<<<<<<<<<
 *         for key in weight_dict[current_node_pair]:
 *             if key.first == -1:
 */
      goto __pyx_L3_continue;

      /* "_smatch.pyx":371
 *         # node i in AMR 1 maps to node m in AMR 2
 *         current_node_pair = _hash_pair(i, m)
 *         if weight_dict.count(current_node_pair) == 0:             # <<<<<<<<<<<<<<
 *             continue
 *         for key in weight_dict[current_node_pair]:
 */
    }

    /* "_smatch.pyx":373
 *         if weight_dict.count(current_node_pair) == 0:
 *             continue
 *         for key in weight_dict[current_node_pair]:             # <<<<<<<<<<<<<<
 *             if key.first == -1:
 *                 # matching triple resulting from instance/attribute triples
 */
    __pyx_t_10 = &(__pyx_v_weight_dict[__pyx_v_current_node_pair]);
    __pyx_t_9 = __pyx_t_10->begin();
    for (;;) {
      if (!(__pyx_t_9 != __pyx_t_10->end())) break;
      __pyx_t_11 = *__pyx_t_9;
      ++__pyx_t_9;
      __pyx_v_key = __pyx_t_11;

      /* "_smatch.pyx":374
 *             continue
 *         for key in weight_dict[current_node_pair]:
 *             if key.first == -1:             # <<<<<<<<<<<<<<
 *                 # matching triple resulting from instance/attribute triples
 *                 match_num += key.second
 */
      __pyx_t_6 = ((__pyx_v_key.first == -1L) != 0);
      if (__pyx_t_6) {

        /* "_smatch.pyx":376
 *             if key.first == -1:
 *                 # matching triple resulting from instance/attribute triples
 *                 match_num += key.second             # <<<<<<<<<<<<<<
 *             # only consider node index larger than i to avoid duplicates
 *             # as we store both weight_dict[node_pair1][node_pair2] and
 */
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_key.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_v_match_num, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF_SET(__pyx_v_match_num, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "_smatch.pyx":374
 *             continue
 *         for key in weight_dict[current_node_pair]:
 *             if key.first == -1:             # <<<<<<<<<<<<<<
 *                 # matching triple resulting from instance/attribute triples
 *                 match_num += key.second
 */
        goto __pyx_L9;
      }

      /* "_smatch.pyx":380
 *             # as we store both weight_dict[node_pair1][node_pair2] and
 *             #     weight_dict[node_pair2][node_pair1] for a relation
 *             elif _get_0(key.first) < i:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif mapping[_get_0(key.first)] == _get_1(key.first):
 */
      __pyx_t_12 = __Pyx_PyInt_From_int(_get_0(__pyx_v_key.first)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_12, __pyx_v_i, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_6) {

        /* "_smatch.pyx":381
 *             #     weight_dict[node_pair2][node_pair1] for a relation
 *             elif _get_0(key.first) < i:
 *                 continue             # <<<<<<<<<<<<<<
 *             elif mapping[_get_0(key.first)] == _get_1(key.first):
 *                 match_num += key.second
 */
        goto __pyx_L7_continue;

        /* "_smatch.pyx":380
 *             # as we store both weight_dict[node_pair1][node_pair2] and
 *             #     weight_dict[node_pair2][node_pair1] for a relation
 *             elif _get_0(key.first) < i:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif mapping[_get_0(key.first)] == _get_1(key.first):
 */
      }

      /* "_smatch.pyx":382
 *             elif _get_0(key.first) < i:
 *                 continue
 *             elif mapping[_get_0(key.first)] == _get_1(key.first):             # <<<<<<<<<<<<<<
 *                 match_num += key.second
 *         if match_num == 0:
 */
      __pyx_t_6 = (((__pyx_v_mapping[_get_0(__pyx_v_key.first)]) == _get_1(__pyx_v_key.first)) != 0);
      if (__pyx_t_6) {

        /* "_smatch.pyx":383
 *                 continue
 *             elif mapping[_get_0(key.first)] == _get_1(key.first):
 *                 match_num += key.second             # <<<<<<<<<<<<<<
 *         if match_num == 0:
 *             mapping[i] = -1
 */
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_key.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_v_match_num, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF_SET(__pyx_v_match_num, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "_smatch.pyx":382
 *             elif _get_0(key.first) < i:
 *                 continue
 *             elif mapping[_get_0(key.first)] == _get_1(key.first):             # <<<<<<<<<<<<<<
 *                 match_num += key.second
 *         if match_num == 0:
 */
      }
      __pyx_L9:;

      /* "_smatch.pyx":373
 *         if weight_dict.count(current_node_pair) == 0:
 *             continue
 *         for key in weight_dict[current_node_pair]:             # <<<<<<<<<<<<<<
 *             if key.first == -1:
 *                 # matching triple resulting from instance/attribute triples
 */
      __pyx_L7_continue:;
    }

    /* "_smatch.pyx":384
 *             elif mapping[_get_0(key.first)] == _get_1(key.first):
 *                 match_num += key.second
 *         if match_num == 0:             # <<<<<<<<<<<<<<
 *             mapping[i] = -1
 * 
 */
    __pyx_t_12 = __Pyx_PyInt_EqObjC(__pyx_v_match_num, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (__pyx_t_6) {

      /* "_smatch.pyx":385
 *                 match_num += key.second
 *         if match_num == 0:
 *             mapping[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_13 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_13 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 385, __pyx_L1_error)
      (__pyx_v_mapping[__pyx_t_13]) = -1;

      /* "_smatch.pyx":384
 *             elif mapping[_get_0(key.first)] == _get_1(key.first):
 *                 match_num += key.second
 *         if match_num == 0:             # <<<<<<<<<<<<<<
 *             mapping[i] = -1
 * 
 */
    }

    /* "_smatch.pyx":364
 * cdef void remove_zero_alignments(vector[int] & mapping,
 *                                  unordered_map[int, unordered_map[int, int]] & weight_dict):
 *     for i, m in enumerate(mapping):             # <<<<<<<<<<<<<<
 *         match_num = 0
 *         if m == -1:
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_smatch.pyx":362
 * 
 * @cython.boundscheck(False)
 * cdef void remove_zero_alignments(vector[int] & mapping,             # <<<<<<<<<<<<<<
 *                                  unordered_map[int, unordered_map[int, int]] & weight_dict):
 *     for i, m in enumerate(mapping):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("_smatch.remove_zero_alignments", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_match_num);
  __Pyx_RefNannyFinishContext();
}

/* "_smatch.pyx":389
 * 
 * @cython.boundscheck(False)
 * cpdef get_best_match(instance1, attribute1, relation1,             # <<<<<<<<<<<<<<
 *                      instance2, attribute2, relation2,
 *                      prefix1, prefix2, iteration_num=5, verbose=False):
 */

static PyObject *__pyx_pw_7_smatch_1get_best_match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7_smatch_get_best_match(PyObject *__pyx_v_instance1, PyObject *__pyx_v_attribute1, PyObject *__pyx_v_relation1, PyObject *__pyx_v_instance2, PyObject *__pyx_v_attribute2, PyObject *__pyx_v_relation2, PyObject *__pyx_v_prefix1, PyObject *__pyx_v_prefix2, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_7_smatch_get_best_match *__pyx_optional_args) {
  PyObject *__pyx_v_iteration_num = ((PyObject *)__pyx_int_5);

  /* "_smatch.pyx":391
 * cpdef get_best_match(instance1, attribute1, relation1,
 *                      instance2, attribute2, relation2,
 *                      prefix1, prefix2, iteration_num=5, verbose=False):             # <<<<<<<<<<<<<<
 *     """
 *     Get the highest triple match number between two sets of triples via hill-climbing.
 */
  PyObject *__pyx_v_verbose = ((PyObject *)Py_False);
  std::vector<std::unordered_set<int> >  __pyx_v_candidate_mappings;
  std::unordered_map<int,std::unordered_map<int,int> >  __pyx_v_weight_dict;
  int __pyx_v_best_match_num;
  int __pyx_v_match_num;
  std::vector<int>  __pyx_v_best_mapping;
  std::vector<int>  __pyx_v_cur_mapping;
  std::vector<int>  __pyx_v_new_mapping;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_gain = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  std::vector<int>  __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("get_best_match", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_iteration_num = __pyx_optional_args->iteration_num;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_verbose = __pyx_optional_args->verbose;
      }
    }
  }

  /* "_smatch.pyx":416
 *     cdef unordered_map[int, unordered_map[int, int]] weight_dict
 * 
 *     compute_pool(instance1, attribute1, relation1, instance2, attribute2, relation2,             # <<<<<<<<<<<<<<
 *                  prefix1, prefix2, candidate_mappings, weight_dict)
 * 
 */
  __pyx_f_7_smatch_compute_pool(__pyx_v_instance1, __pyx_v_attribute1, __pyx_v_relation1, __pyx_v_instance2, __pyx_v_attribute2, __pyx_v_relation2, __pyx_v_prefix1, __pyx_v_prefix2, __pyx_v_candidate_mappings, __pyx_v_weight_dict);

  /* "_smatch.pyx":419
 *                  prefix1, prefix2, candidate_mappings, weight_dict)
 * 
 *     if verbose:             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, "Candidate mappings:"
 *         print >> DEBUG_LOG, candidate_mappings
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 419, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "_smatch.pyx":420
 * 
 *     if verbose:
 *         print >> DEBUG_LOG, "Candidate mappings:"             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, candidate_mappings
 *         print >> DEBUG_LOG, "Weight dictionary"
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PrintOne(__pyx_t_2, __pyx_kp_s_Candidate_mappings) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_smatch.pyx":421
 *     if verbose:
 *         print >> DEBUG_LOG, "Candidate mappings:"
 *         print >> DEBUG_LOG, candidate_mappings             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, "Weight dictionary"
 *         print >> DEBUG_LOG, weight_dict
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___(__pyx_v_candidate_mappings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_PrintOne(__pyx_t_2, __pyx_t_3) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_smatch.pyx":422
 *         print >> DEBUG_LOG, "Candidate mappings:"
 *         print >> DEBUG_LOG, candidate_mappings
 *         print >> DEBUG_LOG, "Weight dictionary"             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, weight_dict
 *     cdef int best_match_num = 0
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PrintOne(__pyx_t_2, __pyx_kp_s_Weight_dictionary) < 0) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_smatch.pyx":423
 *         print >> DEBUG_LOG, candidate_mappings
 *         print >> DEBUG_LOG, "Weight dictionary"
 *         print >> DEBUG_LOG, weight_dict             # <<<<<<<<<<<<<<
 *     cdef int best_match_num = 0
 *     cdef int match_num = 0
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___(__pyx_v_weight_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_PrintOne(__pyx_t_2, __pyx_t_3) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_smatch.pyx":419
 *                  prefix1, prefix2, candidate_mappings, weight_dict)
 * 
 *     if verbose:             # <<<<<<<<<<<<<<
 *         print >> DEBUG_LOG, "Candidate mappings:"
 *         print >> DEBUG_LOG, candidate_mappings
 */
  }

  /* "_smatch.pyx":424
 *         print >> DEBUG_LOG, "Weight dictionary"
 *         print >> DEBUG_LOG, weight_dict
 *     cdef int best_match_num = 0             # <<<<<<<<<<<<<<
 *     cdef int match_num = 0
 *     # initialize best match mapping
 */
  __pyx_v_best_match_num = 0;

  /* "_smatch.pyx":425
 *         print >> DEBUG_LOG, weight_dict
 *     cdef int best_match_num = 0
 *     cdef int match_num = 0             # <<<<<<<<<<<<<<
 *     # initialize best match mapping
 *     # the ith entry is the node index in AMR 2 which maps to the ith node in AMR 1
 */
  __pyx_v_match_num = 0;

  /* "_smatch.pyx":428
 *     # initialize best match mapping
 *     # the ith entry is the node index in AMR 2 which maps to the ith node in AMR 1
 *     cdef vector[int] best_mapping = vector[int](len(instance1), -1)             # <<<<<<<<<<<<<<
 *     cdef vector[int] cur_mapping
 *     cdef vector[int] new_mapping
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_instance1); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 428, __pyx_L1_error)
  try {
    __pyx_t_5 = std::vector<int> (__pyx_t_4, -1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 428, __pyx_L1_error)
  }
  __pyx_v_best_mapping = __pyx_t_5;

  /* "_smatch.pyx":431
 *     cdef vector[int] cur_mapping
 *     cdef vector[int] new_mapping
 *     for i in range(iteration_num):             # <<<<<<<<<<<<<<
 *         if verbose:
 *             print >> DEBUG_LOG, "Iteration", i
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_iteration_num); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 431, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 431, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 431, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 431, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "_smatch.pyx":432
 *     cdef vector[int] new_mapping
 *     for i in range(iteration_num):
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "Iteration", i
 *         if i == 0:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 432, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "_smatch.pyx":433
 *     for i in range(iteration_num):
 *         if verbose:
 *             print >> DEBUG_LOG, "Iteration", i             # <<<<<<<<<<<<<<
 *         if i == 0:
 *             # smart initialization used for the first round
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_n_s_Iteration);
      __Pyx_GIVEREF(__pyx_n_s_Iteration);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_Iteration);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_i);
      if (__Pyx_Print(__pyx_t_2, __pyx_t_7, 1) < 0) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "_smatch.pyx":432
 *     cdef vector[int] new_mapping
 *     for i in range(iteration_num):
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "Iteration", i
 *         if i == 0:
 */
    }

    /* "_smatch.pyx":434
 *         if verbose:
 *             print >> DEBUG_LOG, "Iteration", i
 *         if i == 0:             # <<<<<<<<<<<<<<
 *             # smart initialization used for the first round
 *             smart_init_mapping(candidate_mappings, instance1, instance2, cur_mapping)
 */
    __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_i, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "_smatch.pyx":436
 *         if i == 0:
 *             # smart initialization used for the first round
 *             smart_init_mapping(candidate_mappings, instance1, instance2, cur_mapping)             # <<<<<<<<<<<<<<
 *         else:
 *             # random initialization for the other round
 */
      __pyx_f_7_smatch_smart_init_mapping(__pyx_v_candidate_mappings, __pyx_v_instance1, __pyx_v_instance2, __pyx_v_cur_mapping);

      /* "_smatch.pyx":434
 *         if verbose:
 *             print >> DEBUG_LOG, "Iteration", i
 *         if i == 0:             # <<<<<<<<<<<<<<
 *             # smart initialization used for the first round
 *             smart_init_mapping(candidate_mappings, instance1, instance2, cur_mapping)
 */
      goto __pyx_L7;
    }

    /* "_smatch.pyx":439
 *         else:
 *             # random initialization for the other round
 *             random_init_mapping(candidate_mappings, cur_mapping)             # <<<<<<<<<<<<<<
 *         # compute current triple match number
 *         match_num = compute_match(cur_mapping, weight_dict)
 */
    /*else*/ {
      __pyx_f_7_smatch_random_init_mapping(__pyx_v_candidate_mappings, __pyx_v_cur_mapping);
    }
    __pyx_L7:;

    /* "_smatch.pyx":441
 *             random_init_mapping(candidate_mappings, cur_mapping)
 *         # compute current triple match number
 *         match_num = compute_match(cur_mapping, weight_dict)             # <<<<<<<<<<<<<<
 *         if verbose:
 *             print >> DEBUG_LOG, "Node mapping at start", cur_mapping
 */
    __pyx_v_match_num = __pyx_f_7_smatch_compute_match(__pyx_v_cur_mapping, __pyx_v_weight_dict, NULL);

    /* "_smatch.pyx":442
 *         # compute current triple match number
 *         match_num = compute_match(cur_mapping, weight_dict)
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "Node mapping at start", cur_mapping
 *             print >> DEBUG_LOG, "Triple match number at start:", match_num
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 442, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "_smatch.pyx":443
 *         match_num = compute_match(cur_mapping, weight_dict)
 *         if verbose:
 *             print >> DEBUG_LOG, "Node mapping at start", cur_mapping             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "Triple match number at start:", match_num
 *         while True:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __pyx_convert_vector_to_py_int(__pyx_v_cur_mapping); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_kp_s_Node_mapping_at_start);
      __Pyx_GIVEREF(__pyx_kp_s_Node_mapping_at_start);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_s_Node_mapping_at_start);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
      __pyx_t_7 = 0;
      if (__Pyx_Print(__pyx_t_2, __pyx_t_8, 1) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "_smatch.pyx":444
 *         if verbose:
 *             print >> DEBUG_LOG, "Node mapping at start", cur_mapping
 *             print >> DEBUG_LOG, "Triple match number at start:", match_num             # <<<<<<<<<<<<<<
 *         while True:
 *             # get best gain
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_match_num); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_kp_s_Triple_match_number_at_start);
      __Pyx_GIVEREF(__pyx_kp_s_Triple_match_number_at_start);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_s_Triple_match_number_at_start);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
      __pyx_t_8 = 0;
      if (__Pyx_Print(__pyx_t_2, __pyx_t_7, 1) < 0) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "_smatch.pyx":442
 *         # compute current triple match number
 *         match_num = compute_match(cur_mapping, weight_dict)
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "Node mapping at start", cur_mapping
 *             print >> DEBUG_LOG, "Triple match number at start:", match_num
 */
    }

    /* "_smatch.pyx":445
 *             print >> DEBUG_LOG, "Node mapping at start", cur_mapping
 *             print >> DEBUG_LOG, "Triple match number at start:", match_num
 *         while True:             # <<<<<<<<<<<<<<
 *             # get best gain
 *             gain = get_best_gain(cur_mapping, candidate_mappings, weight_dict,
 */
    while (1) {

      /* "_smatch.pyx":448
 *             # get best gain
 *             gain = get_best_gain(cur_mapping, candidate_mappings, weight_dict,
 *                                  len(instance2), match_num, new_mapping)             # <<<<<<<<<<<<<<
 *             if verbose:
 *                 print >> DEBUG_LOG, "Gain after the hill-climbing", gain
 */
      __pyx_t_9 = PyObject_Length(__pyx_v_instance2); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 448, __pyx_L1_error)

      /* "_smatch.pyx":447
 *         while True:
 *             # get best gain
 *             gain = get_best_gain(cur_mapping, candidate_mappings, weight_dict,             # <<<<<<<<<<<<<<
 *                                  len(instance2), match_num, new_mapping)
 *             if verbose:
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_f_7_smatch_get_best_gain(__pyx_v_cur_mapping, __pyx_v_candidate_mappings, __pyx_v_weight_dict, __pyx_t_9, __pyx_v_match_num, __pyx_v_new_mapping, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_gain, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "_smatch.pyx":449
 *             gain = get_best_gain(cur_mapping, candidate_mappings, weight_dict,
 *                                  len(instance2), match_num, new_mapping)
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Gain after the hill-climbing", gain
 *             # hill-climbing until there will be no gain for new node mapping
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 449, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "_smatch.pyx":450
 *                                  len(instance2), match_num, new_mapping)
 *             if verbose:
 *                 print >> DEBUG_LOG, "Gain after the hill-climbing", gain             # <<<<<<<<<<<<<<
 *             # hill-climbing until there will be no gain for new node mapping
 *             if gain <= 0:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 450, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 450, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_kp_s_Gain_after_the_hill_climbing);
        __Pyx_GIVEREF(__pyx_kp_s_Gain_after_the_hill_climbing);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_s_Gain_after_the_hill_climbing);
        __Pyx_INCREF(__pyx_v_gain);
        __Pyx_GIVEREF(__pyx_v_gain);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_gain);
        if (__Pyx_Print(__pyx_t_2, __pyx_t_7, 1) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "_smatch.pyx":449
 *             gain = get_best_gain(cur_mapping, candidate_mappings, weight_dict,
 *                                  len(instance2), match_num, new_mapping)
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Gain after the hill-climbing", gain
 *             # hill-climbing until there will be no gain for new node mapping
 */
      }

      /* "_smatch.pyx":452
 *                 print >> DEBUG_LOG, "Gain after the hill-climbing", gain
 *             # hill-climbing until there will be no gain for new node mapping
 *             if gain <= 0:             # <<<<<<<<<<<<<<
 *                 break
 *             # otherwise update match_num and mapping
 */
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_gain, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 452, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "_smatch.pyx":453
 *             # hill-climbing until there will be no gain for new node mapping
 *             if gain <= 0:
 *                 break             # <<<<<<<<<<<<<<
 *             # otherwise update match_num and mapping
 *             match_num += gain
 */
        goto __pyx_L10_break;

        /* "_smatch.pyx":452
 *                 print >> DEBUG_LOG, "Gain after the hill-climbing", gain
 *             # hill-climbing until there will be no gain for new node mapping
 *             if gain <= 0:             # <<<<<<<<<<<<<<
 *                 break
 *             # otherwise update match_num and mapping
 */
      }

      /* "_smatch.pyx":455
 *                 break
 *             # otherwise update match_num and mapping
 *             match_num += gain             # <<<<<<<<<<<<<<
 *             cur_mapping = new_mapping
 *             if verbose:
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_match_num); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_2, __pyx_v_gain); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_match_num = __pyx_t_10;

      /* "_smatch.pyx":456
 *             # otherwise update match_num and mapping
 *             match_num += gain
 *             cur_mapping = new_mapping             # <<<<<<<<<<<<<<
 *             if verbose:
 *                 print >> DEBUG_LOG, "Update triple match number to:", match_num
 */
      __pyx_v_cur_mapping = __pyx_v_new_mapping;

      /* "_smatch.pyx":457
 *             match_num += gain
 *             cur_mapping = new_mapping
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Update triple match number to:", match_num
 *                 print >> DEBUG_LOG, "Current mapping:", cur_mapping
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 457, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "_smatch.pyx":458
 *             cur_mapping = new_mapping
 *             if verbose:
 *                 print >> DEBUG_LOG, "Update triple match number to:", match_num             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Current mapping:", cur_mapping
 *         if match_num > best_match_num:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_match_num); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_kp_s_Update_triple_match_number_to);
        __Pyx_GIVEREF(__pyx_kp_s_Update_triple_match_number_to);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_s_Update_triple_match_number_to);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
        __pyx_t_2 = 0;
        if (__Pyx_Print(__pyx_t_7, __pyx_t_8, 1) < 0) __PYX_ERR(0, 458, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "_smatch.pyx":459
 *             if verbose:
 *                 print >> DEBUG_LOG, "Update triple match number to:", match_num
 *                 print >> DEBUG_LOG, "Current mapping:", cur_mapping             # <<<<<<<<<<<<<<
 *         if match_num > best_match_num:
 *             best_mapping = cur_mapping
 */
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 459, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __pyx_convert_vector_to_py_int(__pyx_v_cur_mapping); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 459, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_kp_s_Current_mapping_2);
        __Pyx_GIVEREF(__pyx_kp_s_Current_mapping_2);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_Current_mapping_2);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        if (__Pyx_Print(__pyx_t_7, __pyx_t_2, 1) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "_smatch.pyx":457
 *             match_num += gain
 *             cur_mapping = new_mapping
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print >> DEBUG_LOG, "Update triple match number to:", match_num
 *                 print >> DEBUG_LOG, "Current mapping:", cur_mapping
 */
      }
    }
    __pyx_L10_break:;

    /* "_smatch.pyx":460
 *                 print >> DEBUG_LOG, "Update triple match number to:", match_num
 *                 print >> DEBUG_LOG, "Current mapping:", cur_mapping
 *         if match_num > best_match_num:             # <<<<<<<<<<<<<<
 *             best_mapping = cur_mapping
 *             best_match_num = match_num
 */
    __pyx_t_1 = ((__pyx_v_match_num > __pyx_v_best_match_num) != 0);
    if (__pyx_t_1) {

      /* "_smatch.pyx":461
 *                 print >> DEBUG_LOG, "Current mapping:", cur_mapping
 *         if match_num > best_match_num:
 *             best_mapping = cur_mapping             # <<<<<<<<<<<<<<
 *             best_match_num = match_num
 *     remove_zero_alignments(best_mapping, weight_dict)
 */
      __pyx_v_best_mapping = __pyx_v_cur_mapping;

      /* "_smatch.pyx":462
 *         if match_num > best_match_num:
 *             best_mapping = cur_mapping
 *             best_match_num = match_num             # <<<<<<<<<<<<<<
 *     remove_zero_alignments(best_mapping, weight_dict)
 *     return best_mapping, best_match_num
 */
      __pyx_v_best_match_num = __pyx_v_match_num;

      /* "_smatch.pyx":460
 *                 print >> DEBUG_LOG, "Update triple match number to:", match_num
 *                 print >> DEBUG_LOG, "Current mapping:", cur_mapping
 *         if match_num > best_match_num:             # <<<<<<<<<<<<<<
 *             best_mapping = cur_mapping
 *             best_match_num = match_num
 */
    }

    /* "_smatch.pyx":431
 *     cdef vector[int] cur_mapping
 *     cdef vector[int] new_mapping
 *     for i in range(iteration_num):             # <<<<<<<<<<<<<<
 *         if verbose:
 *             print >> DEBUG_LOG, "Iteration", i
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_smatch.pyx":463
 *             best_mapping = cur_mapping
 *             best_match_num = match_num
 *     remove_zero_alignments(best_mapping, weight_dict)             # <<<<<<<<<<<<<<
 *     return best_mapping, best_match_num
 * 
 */
  __pyx_f_7_smatch_remove_zero_alignments(__pyx_v_best_mapping, __pyx_v_weight_dict);

  /* "_smatch.pyx":464
 *             best_match_num = match_num
 *     remove_zero_alignments(best_mapping, weight_dict)
 *     return best_mapping, best_match_num             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_convert_vector_to_py_int(__pyx_v_best_mapping); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_best_match_num); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
  __pyx_t_3 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_smatch.pyx":389
 * 
 * @cython.boundscheck(False)
 * cpdef get_best_match(instance1, attribute1, relation1,             # <<<<<<<<<<<<<<
 *                      instance2, attribute2, relation2,
 *                      prefix1, prefix2, iteration_num=5, verbose=False):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("_smatch.get_best_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_gain);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7_smatch_1get_best_match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7_smatch_get_best_match[] = "\n    Get the highest triple match number between two sets of triples via hill-climbing.\n    Arguments:\n        instance1: instance triples of AMR 1 (\"instance\", node name, node value)\n        attribute1: attribute triples of AMR 1 (attribute name, node name, attribute value)\n        relation1: relation triples of AMR 1 (relation name, node 1 name, node 2 name)\n        instance2: instance triples of AMR 2 (\"instance\", node name, node value)\n        attribute2: attribute triples of AMR 2 (attribute name, node name, attribute value)\n        relation2: relation triples of AMR 2 (relation name, node 1 name, node 2 name)\n        prefix1: prefix label for AMR 1\n        prefix2: prefix label for AMR 2\n        iteration_num:\n        verbose:\n    Returns:\n        best_match: the node mapping that results in the highest triple matching number\n        best_match_num: the highest triple matching number\n\n    ";
static PyObject *__pyx_pw_7_smatch_1get_best_match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_instance1 = 0;
  PyObject *__pyx_v_attribute1 = 0;
  PyObject *__pyx_v_relation1 = 0;
  PyObject *__pyx_v_instance2 = 0;
  PyObject *__pyx_v_attribute2 = 0;
  PyObject *__pyx_v_relation2 = 0;
  PyObject *__pyx_v_prefix1 = 0;
  PyObject *__pyx_v_prefix2 = 0;
  PyObject *__pyx_v_iteration_num = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_best_match (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_instance1,&__pyx_n_s_attribute1,&__pyx_n_s_relation1,&__pyx_n_s_instance2,&__pyx_n_s_attribute2,&__pyx_n_s_relation2,&__pyx_n_s_prefix1,&__pyx_n_s_prefix2,&__pyx_n_s_iteration_num,&__pyx_n_s_verbose,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject *)__pyx_int_5);

    /* "_smatch.pyx":391
 * cpdef get_best_match(instance1, attribute1, relation1,
 *                      instance2, attribute2, relation2,
 *                      prefix1, prefix2, iteration_num=5, verbose=False):             # <<<<<<<<<<<<<<
 *     """
 *     Get the highest triple match number between two sets of triples via hill-climbing.
 */
    values[9] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_instance1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_best_match", 0, 8, 10, 1); __PYX_ERR(0, 389, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_relation1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_best_match", 0, 8, 10, 2); __PYX_ERR(0, 389, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_instance2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_best_match", 0, 8, 10, 3); __PYX_ERR(0, 389, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_best_match", 0, 8, 10, 4); __PYX_ERR(0, 389, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_relation2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_best_match", 0, 8, 10, 5); __PYX_ERR(0, 389, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_best_match", 0, 8, 10, 6); __PYX_ERR(0, 389, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_best_match", 0, 8, 10, 7); __PYX_ERR(0, 389, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iteration_num);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_best_match") < 0)) __PYX_ERR(0, 389, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_instance1 = values[0];
    __pyx_v_attribute1 = values[1];
    __pyx_v_relation1 = values[2];
    __pyx_v_instance2 = values[3];
    __pyx_v_attribute2 = values[4];
    __pyx_v_relation2 = values[5];
    __pyx_v_prefix1 = values[6];
    __pyx_v_prefix2 = values[7];
    __pyx_v_iteration_num = values[8];
    __pyx_v_verbose = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_best_match", 0, 8, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 389, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_smatch.get_best_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7_smatch_get_best_match(__pyx_self, __pyx_v_instance1, __pyx_v_attribute1, __pyx_v_relation1, __pyx_v_instance2, __pyx_v_attribute2, __pyx_v_relation2, __pyx_v_prefix1, __pyx_v_prefix2, __pyx_v_iteration_num, __pyx_v_verbose);

  /* "_smatch.pyx":389
 * 
 * @cython.boundscheck(False)
 * cpdef get_best_match(instance1, attribute1, relation1,             # <<<<<<<<<<<<<<
 *                      instance2, attribute2, relation2,
 *                      prefix1, prefix2, iteration_num=5, verbose=False):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7_smatch_get_best_match(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_instance1, PyObject *__pyx_v_attribute1, PyObject *__pyx_v_relation1, PyObject *__pyx_v_instance2, PyObject *__pyx_v_attribute2, PyObject *__pyx_v_relation2, PyObject *__pyx_v_prefix1, PyObject *__pyx_v_prefix2, PyObject *__pyx_v_iteration_num, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7_smatch_get_best_match __pyx_t_2;
  __Pyx_RefNannySetupContext("get_best_match", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.iteration_num = __pyx_v_iteration_num;
  __pyx_t_2.verbose = __pyx_v_verbose;
  __pyx_t_1 = __pyx_f_7_smatch_get_best_match(__pyx_v_instance1, __pyx_v_attribute1, __pyx_v_relation1, __pyx_v_instance2, __pyx_v_attribute2, __pyx_v_relation2, __pyx_v_prefix1, __pyx_v_prefix2, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_smatch.get_best_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_smatch.pyx":467
 * 
 * 
 * def clear_match_triple_dict():             # <<<<<<<<<<<<<<
 *     # dummy for api
 *     pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_7_smatch_3clear_match_triple_dict(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7_smatch_3clear_match_triple_dict = {"clear_match_triple_dict", (PyCFunction)__pyx_pw_7_smatch_3clear_match_triple_dict, METH_NOARGS, 0};
static PyObject *__pyx_pw_7_smatch_3clear_match_triple_dict(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_match_triple_dict (wrapper)", 0);
  __pyx_r = __pyx_pf_7_smatch_2clear_match_triple_dict(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7_smatch_2clear_match_triple_dict(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_match_triple_dict", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_smatch.pyx":472
 * 
 * 
 * def compute_f(match_num, test_num, gold_num, verbose=False):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the f-score based on the matching triple number,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7_smatch_5compute_f(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7_smatch_4compute_f[] = "\n    Compute the f-score based on the matching triple number,\n                                 triple number of AMR set 1,\n                                 triple number of AMR set 2\n    Args:\n        match_num: matching triple number\n        test_num:  triple number of AMR 1 (test file)\n        gold_num:  triple number of AMR 2 (gold file)\n        verbose\n    Returns:\n        precision: match_num/test_num\n        recall: match_num/gold_num\n        f_score: 2*precision*recall/(precision+recall)\n    ";
static PyMethodDef __pyx_mdef_7_smatch_5compute_f = {"compute_f", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7_smatch_5compute_f, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7_smatch_4compute_f};
static PyObject *__pyx_pw_7_smatch_5compute_f(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_match_num = 0;
  PyObject *__pyx_v_test_num = 0;
  PyObject *__pyx_v_gold_num = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_f (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_match_num,&__pyx_n_s_test_num,&__pyx_n_s_gold_num,&__pyx_n_s_verbose,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_match_num)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_test_num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_f", 0, 3, 4, 1); __PYX_ERR(0, 472, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gold_num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_f", 0, 3, 4, 2); __PYX_ERR(0, 472, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_f") < 0)) __PYX_ERR(0, 472, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_match_num = values[0];
    __pyx_v_test_num = values[1];
    __pyx_v_gold_num = values[2];
    __pyx_v_verbose = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_f", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 472, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_smatch.compute_f", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7_smatch_4compute_f(__pyx_self, __pyx_v_match_num, __pyx_v_test_num, __pyx_v_gold_num, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7_smatch_4compute_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_match_num, PyObject *__pyx_v_test_num, PyObject *__pyx_v_gold_num, PyObject *__pyx_v_verbose) {
  double __pyx_v_precision;
  double __pyx_v_recall;
  double __pyx_v_f_score;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("compute_f", 0);

  /* "_smatch.pyx":487
 *         f_score: 2*precision*recall/(precision+recall)
 *     """
 *     if test_num == 0 or gold_num == 0:             # <<<<<<<<<<<<<<
 *         return 0.00, 0.00, 0.00
 *     precision = float(match_num) / float(test_num)
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_test_num, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_gold_num, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_smatch.pyx":488
 *     """
 *     if test_num == 0 or gold_num == 0:
 *         return 0.00, 0.00, 0.00             # <<<<<<<<<<<<<<
 *     precision = float(match_num) / float(test_num)
 *     recall = float(match_num) / float(gold_num)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__4);
    __pyx_r = __pyx_tuple__4;
    goto __pyx_L0;

    /* "_smatch.pyx":487
 *         f_score: 2*precision*recall/(precision+recall)
 *     """
 *     if test_num == 0 or gold_num == 0:             # <<<<<<<<<<<<<<
 *         return 0.00, 0.00, 0.00
 *     precision = float(match_num) / float(test_num)
 */
  }

  /* "_smatch.pyx":489
 *     if test_num == 0 or gold_num == 0:
 *         return 0.00, 0.00, 0.00
 *     precision = float(match_num) / float(test_num)             # <<<<<<<<<<<<<<
 *     recall = float(match_num) / float(gold_num)
 *     if (precision + recall) != 0:
 */
  __pyx_t_4 = __Pyx_PyObject_AsDouble(__pyx_v_match_num); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_AsDouble(__pyx_v_test_num); if (unlikely(__pyx_t_5 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
  if (unlikely(__pyx_t_5 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 489, __pyx_L1_error)
  }
  __pyx_v_precision = (__pyx_t_4 / __pyx_t_5);

  /* "_smatch.pyx":490
 *         return 0.00, 0.00, 0.00
 *     precision = float(match_num) / float(test_num)
 *     recall = float(match_num) / float(gold_num)             # <<<<<<<<<<<<<<
 *     if (precision + recall) != 0:
 *         f_score = 2 * precision * recall / (precision + recall)
 */
  __pyx_t_5 = __Pyx_PyObject_AsDouble(__pyx_v_match_num); if (unlikely(__pyx_t_5 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_AsDouble(__pyx_v_gold_num); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L1_error)
  if (unlikely(__pyx_t_4 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 490, __pyx_L1_error)
  }
  __pyx_v_recall = (__pyx_t_5 / __pyx_t_4);

  /* "_smatch.pyx":491
 *     precision = float(match_num) / float(test_num)
 *     recall = float(match_num) / float(gold_num)
 *     if (precision + recall) != 0:             # <<<<<<<<<<<<<<
 *         f_score = 2 * precision * recall / (precision + recall)
 *         if verbose:
 */
  __pyx_t_1 = (((__pyx_v_precision + __pyx_v_recall) != 0.0) != 0);
  if (__pyx_t_1) {

    /* "_smatch.pyx":492
 *     recall = float(match_num) / float(gold_num)
 *     if (precision + recall) != 0:
 *         f_score = 2 * precision * recall / (precision + recall)             # <<<<<<<<<<<<<<
 *         if verbose:
 *             print >> DEBUG_LOG, "F-score:", f_score
 */
    __pyx_t_4 = ((2.0 * __pyx_v_precision) * __pyx_v_recall);
    __pyx_t_5 = (__pyx_v_precision + __pyx_v_recall);
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 492, __pyx_L1_error)
    }
    __pyx_v_f_score = (__pyx_t_4 / __pyx_t_5);

    /* "_smatch.pyx":493
 *     if (precision + recall) != 0:
 *         f_score = 2 * precision * recall / (precision + recall)
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "F-score:", f_score
 *         return precision, recall, f_score
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 493, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "_smatch.pyx":494
 *         f_score = 2 * precision * recall / (precision + recall)
 *         if verbose:
 *             print >> DEBUG_LOG, "F-score:", f_score             # <<<<<<<<<<<<<<
 *         return precision, recall, f_score
 *     else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_f_score); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_kp_s_F_score);
      __Pyx_GIVEREF(__pyx_kp_s_F_score);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_s_F_score);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      if (__Pyx_Print(__pyx_t_2, __pyx_t_7, 1) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "_smatch.pyx":493
 *     if (precision + recall) != 0:
 *         f_score = 2 * precision * recall / (precision + recall)
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "F-score:", f_score
 *         return precision, recall, f_score
 */
    }

    /* "_smatch.pyx":495
 *         if verbose:
 *             print >> DEBUG_LOG, "F-score:", f_score
 *         return precision, recall, f_score             # <<<<<<<<<<<<<<
 *     else:
 *         if verbose:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_precision); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_recall); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_f_score); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_7 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "_smatch.pyx":491
 *     precision = float(match_num) / float(test_num)
 *     recall = float(match_num) / float(gold_num)
 *     if (precision + recall) != 0:             # <<<<<<<<<<<<<<
 *         f_score = 2 * precision * recall / (precision + recall)
 *         if verbose:
 */
  }

  /* "_smatch.pyx":497
 *         return precision, recall, f_score
 *     else:
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "F-score:", "0.0"
 *         return precision, recall, 0.00
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "_smatch.pyx":498
 *     else:
 *         if verbose:
 *             print >> DEBUG_LOG, "F-score:", "0.0"             # <<<<<<<<<<<<<<
 *         return precision, recall, 0.00
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_DEBUG_LOG); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_Print(__pyx_t_8, __pyx_tuple__5, 1) < 0) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "_smatch.pyx":497
 *         return precision, recall, f_score
 *     else:
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print >> DEBUG_LOG, "F-score:", "0.0"
 *         return precision, recall, 0.00
 */
    }

    /* "_smatch.pyx":499
 *         if verbose:
 *             print >> DEBUG_LOG, "F-score:", "0.0"
 *         return precision, recall, 0.00             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_precision); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_recall); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_INCREF(__pyx_float_0_00);
    __Pyx_GIVEREF(__pyx_float_0_00);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_float_0_00);
    __pyx_t_8 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* "_smatch.pyx":472
 * 
 * 
 * def compute_f(match_num, test_num, gold_num, verbose=False):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the f-score based on the matching triple number,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("_smatch.compute_f", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "set.to_py":129
 * 
 * @cname("__pyx_convert_unordered_set_to_py_int")
 * cdef object __pyx_convert_unordered_set_to_py_int(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

static PyObject *__pyx_convert_unordered_set_to_py_int(std::unordered_set<int>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_set<int> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_set_to_py_int", 0);

  /* "set.to_py":130
 * @cname("__pyx_convert_unordered_set_to_py_int")
 * cdef object __pyx_convert_unordered_set_to_py_int(const cpp_set[X]& s):
 *     o = set()             # <<<<<<<<<<<<<<
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "set.to_py":131
 * cdef object __pyx_convert_unordered_set_to_py_int(const cpp_set[X]& s):
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "set.to_py":132
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "set.to_py":133
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((*__pyx_v_iter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySet_Add(__pyx_v_o, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "set.to_py":134
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "set.to_py":135
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "set.to_py":129
 * 
 * @cname("__pyx_convert_unordered_set_to_py_int")
 * cdef object __pyx_convert_unordered_set_to_py_int(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("set.to_py.__pyx_convert_unordered_set_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___(const std::vector<std::unordered_set<int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_unordered_set_to_py_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_unordered_set_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____int", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((int)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_int____int")
 * cdef object __pyx_convert_unordered_map_to_py_int____int(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_unordered_map_to_py_int____int(std::unordered_map<int,int>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_map<int,int> ::value_type const *__pyx_v_key_value;
  std::unordered_map<int,int> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_map_to_py_int____int", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_unordered_map_to_py_int____int")
 * cdef object __pyx_convert_unordered_map_to_py_int____int(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_int____int")
 * cdef object __pyx_convert_unordered_map_to_py_int____int(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_unordered_map_to_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___(std::unordered_map<int,std::unordered_map<int,int> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_map<int,std::unordered_map<int,int> > ::value_type const *__pyx_v_key_value;
  std::unordered_map<int,std::unordered_map<int,int> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_unordered_map_to_py_int____int(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {"get_best_match", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7_smatch_1get_best_match, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7_smatch_get_best_match},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__smatch(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__smatch},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_smatch",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0_0, __pyx_k_0_0, sizeof(__pyx_k_0_0), 0, 0, 1, 0},
  {&__pyx_kp_s_After_swapping, __pyx_k_After_swapping, sizeof(__pyx_k_After_swapping), 0, 0, 1, 0},
  {&__pyx_kp_s_Before_swapping, __pyx_k_Before_swapping, sizeof(__pyx_k_Before_swapping), 0, 0, 1, 0},
  {&__pyx_kp_s_Candidate_mappings, __pyx_k_Candidate_mappings, sizeof(__pyx_k_Candidate_mappings), 0, 0, 1, 0},
  {&__pyx_kp_s_Computing_match_for_mapping, __pyx_k_Computing_match_for_mapping, sizeof(__pyx_k_Computing_match_for_mapping), 0, 0, 1, 0},
  {&__pyx_kp_s_Current_mapping, __pyx_k_Current_mapping, sizeof(__pyx_k_Current_mapping), 0, 0, 1, 0},
  {&__pyx_kp_s_Current_mapping_2, __pyx_k_Current_mapping_2, sizeof(__pyx_k_Current_mapping_2), 0, 0, 1, 0},
  {&__pyx_n_s_DEBUG_LOG, __pyx_k_DEBUG_LOG, sizeof(__pyx_k_DEBUG_LOG), 0, 0, 1, 1},
  {&__pyx_n_s_ERROR_LOG, __pyx_k_ERROR_LOG, sizeof(__pyx_k_ERROR_LOG), 0, 0, 1, 1},
  {&__pyx_kp_s_F_score, __pyx_k_F_score, sizeof(__pyx_k_F_score), 0, 0, 1, 0},
  {&__pyx_kp_s_Gain_after_the_hill_climbing, __pyx_k_Gain_after_the_hill_climbing, sizeof(__pyx_k_Gain_after_the_hill_climbing), 0, 0, 1, 0},
  {&__pyx_kp_s_Inconsistency_in_computing_move, __pyx_k_Inconsistency_in_computing_move, sizeof(__pyx_k_Inconsistency_in_computing_move), 0, 0, 1, 0},
  {&__pyx_kp_s_Inconsistency_in_computing_swap, __pyx_k_Inconsistency_in_computing_swap, sizeof(__pyx_k_Inconsistency_in_computing_swap), 0, 0, 1, 0},
  {&__pyx_n_s_Iteration, __pyx_k_Iteration, sizeof(__pyx_k_Iteration), 0, 0, 1, 1},
  {&__pyx_kp_s_Move_gain, __pyx_k_Move_gain, sizeof(__pyx_k_Move_gain), 0, 0, 1, 0},
  {&__pyx_kp_s_Node_mapping_at_start, __pyx_k_Node_mapping_at_start, sizeof(__pyx_k_Node_mapping_at_start), 0, 0, 1, 0},
  {&__pyx_kp_s_Original_mapping, __pyx_k_Original_mapping, sizeof(__pyx_k_Original_mapping), 0, 0, 1, 0},
  {&__pyx_kp_s_Remap_node, __pyx_k_Remap_node, sizeof(__pyx_k_Remap_node), 0, 0, 1, 0},
  {&__pyx_kp_s_Swap_gain, __pyx_k_Swap_gain, sizeof(__pyx_k_Swap_gain), 0, 0, 1, 0},
  {&__pyx_kp_s_Swap_node, __pyx_k_Swap_node, sizeof(__pyx_k_Swap_node), 0, 0, 1, 0},
  {&__pyx_kp_s_Triple_match_number_at_start, __pyx_k_Triple_match_number_at_start, sizeof(__pyx_k_Triple_match_number_at_start), 0, 0, 1, 0},
  {&__pyx_kp_s_Update_triple_match_number_to, __pyx_k_Update_triple_match_number_to, sizeof(__pyx_k_Update_triple_match_number_to), 0, 0, 1, 0},
  {&__pyx_kp_s_Use_move_gain, __pyx_k_Use_move_gain, sizeof(__pyx_k_Use_move_gain), 0, 0, 1, 0},
  {&__pyx_kp_s_Use_swap_gain, __pyx_k_Use_swap_gain, sizeof(__pyx_k_Use_swap_gain), 0, 0, 1, 0},
  {&__pyx_kp_s_Weight_dictionary, __pyx_k_Weight_dictionary, sizeof(__pyx_k_Weight_dictionary), 0, 0, 1, 0},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_n_s_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 0, 1, 1},
  {&__pyx_n_s_attribute1, __pyx_k_attribute1, sizeof(__pyx_k_attribute1), 0, 0, 1, 1},
  {&__pyx_n_s_attribute2, __pyx_k_attribute2, sizeof(__pyx_k_attribute2), 0, 0, 1, 1},
  {&__pyx_n_s_choice, __pyx_k_choice, sizeof(__pyx_k_choice), 0, 0, 1, 1},
  {&__pyx_n_s_clear_match_triple_dict, __pyx_k_clear_match_triple_dict, sizeof(__pyx_k_clear_match_triple_dict), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_compute_f, __pyx_k_compute_f, sizeof(__pyx_k_compute_f), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_f_score, __pyx_k_f_score, sizeof(__pyx_k_f_score), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_kp_s_from, __pyx_k_from, sizeof(__pyx_k_from), 0, 0, 1, 0},
  {&__pyx_n_s_gold_num, __pyx_k_gold_num, sizeof(__pyx_k_gold_num), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_instance1, __pyx_k_instance1, sizeof(__pyx_k_instance1), 0, 0, 1, 1},
  {&__pyx_n_s_instance2, __pyx_k_instance2, sizeof(__pyx_k_instance2), 0, 0, 1, 1},
  {&__pyx_kp_s_instance_attribute_match, __pyx_k_instance_attribute_match, sizeof(__pyx_k_instance_attribute_match), 0, 0, 1, 0},
  {&__pyx_n_s_iteration_num, __pyx_k_iteration_num, sizeof(__pyx_k_iteration_num), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_s_match_computing_complete_result, __pyx_k_match_computing_complete_result, sizeof(__pyx_k_match_computing_complete_result), 0, 0, 1, 0},
  {&__pyx_n_s_match_num, __pyx_k_match_num, sizeof(__pyx_k_match_num), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_move_swap_gain_found, __pyx_k_no_move_swap_gain_found, sizeof(__pyx_k_no_move_swap_gain_found), 0, 0, 1, 0},
  {&__pyx_n_s_node_pair, __pyx_k_node_pair, sizeof(__pyx_k_node_pair), 0, 0, 1, 1},
  {&__pyx_n_s_precision, __pyx_k_precision, sizeof(__pyx_k_precision), 0, 0, 1, 1},
  {&__pyx_n_s_prefix1, __pyx_k_prefix1, sizeof(__pyx_k_prefix1), 0, 0, 1, 1},
  {&__pyx_n_s_prefix2, __pyx_k_prefix2, sizeof(__pyx_k_prefix2), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_recall, __pyx_k_recall, sizeof(__pyx_k_recall), 0, 0, 1, 1},
  {&__pyx_n_s_relation1, __pyx_k_relation1, sizeof(__pyx_k_relation1), 0, 0, 1, 1},
  {&__pyx_n_s_relation2, __pyx_k_relation2, sizeof(__pyx_k_relation2), 0, 0, 1, 1},
  {&__pyx_kp_s_relation_match_with, __pyx_k_relation_match_with, sizeof(__pyx_k_relation_match_with), 0, 0, 1, 0},
  {&__pyx_n_s_seed, __pyx_k_seed, sizeof(__pyx_k_seed), 0, 0, 1, 1},
  {&__pyx_n_s_smatch, __pyx_k_smatch, sizeof(__pyx_k_smatch), 0, 0, 1, 1},
  {&__pyx_kp_s_smatch_pyx, __pyx_k_smatch_pyx, sizeof(__pyx_k_smatch_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_stderr, __pyx_k_stderr, sizeof(__pyx_k_stderr), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_test_num, __pyx_k_test_num, sizeof(__pyx_k_test_num), 0, 0, 1, 1},
  {&__pyx_n_s_to, __pyx_k_to, sizeof(__pyx_k_to), 0, 0, 1, 1},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 220, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "_smatch.pyx":300
 *                 if verbose:
 *                     print >> DEBUG_LOG, "Move gain:", mv_gain
 *                     new_mapping = mapping[:]             # <<<<<<<<<<<<<<
 *                     new_mapping[i] = nm
 *                     new_match_num = compute_match(new_mapping, weight_dict)
 */
  __pyx_slice_ = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice_);
  __Pyx_GIVEREF(__pyx_slice_);

  /* "_smatch.pyx":488
 *     """
 *     if test_num == 0 or gold_num == 0:
 *         return 0.00, 0.00, 0.00             # <<<<<<<<<<<<<<
 *     precision = float(match_num) / float(test_num)
 *     recall = float(match_num) / float(gold_num)
 */
  __pyx_tuple__4 = PyTuple_Pack(3, __pyx_float_0_00, __pyx_float_0_00, __pyx_float_0_00); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "_smatch.pyx":498
 *     else:
 *         if verbose:
 *             print >> DEBUG_LOG, "F-score:", "0.0"             # <<<<<<<<<<<<<<
 *         return precision, recall, 0.00
 */
  __pyx_tuple__5 = PyTuple_Pack(2, __pyx_kp_s_F_score, __pyx_kp_s_0_0); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "_smatch.pyx":467
 * 
 * 
 * def clear_match_triple_dict():             # <<<<<<<<<<<<<<
 *     # dummy for api
 *     pass
 */
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_smatch_pyx, __pyx_n_s_clear_match_triple_dict, 467, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 467, __pyx_L1_error)

  /* "_smatch.pyx":472
 * 
 * 
 * def compute_f(match_num, test_num, gold_num, verbose=False):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the f-score based on the matching triple number,
 */
  __pyx_tuple__7 = PyTuple_Pack(7, __pyx_n_s_match_num, __pyx_n_s_test_num, __pyx_n_s_gold_num, __pyx_n_s_verbose, __pyx_n_s_precision, __pyx_n_s_recall, __pyx_n_s_f_score); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_smatch_pyx, __pyx_n_s_compute_f, 472, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_00 = PyFloat_FromDouble(0.00); if (unlikely(!__pyx_float_0_00)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_smatch(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_smatch(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__smatch(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__smatch(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__smatch(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_smatch' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__smatch(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_smatch", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main__smatch) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "_smatch")) {
      if (unlikely(PyDict_SetItemString(modules, "_smatch", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "_smatch.pyx":5
 * from libcpp.unordered_set cimport unordered_set
 * from libcpp.vector cimport vector
 * import sys             # <<<<<<<<<<<<<<
 * import random
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_smatch.pyx":6
 * from libcpp.vector cimport vector
 * import sys
 * import random             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_random, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_smatch.pyx":10
 * 
 * # Error log location
 * ERROR_LOG = sys.stderr             # <<<<<<<<<<<<<<
 * 
 * # Debug log location
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_stderr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ERROR_LOG, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_smatch.pyx":13
 * 
 * # Debug log location
 * DEBUG_LOG = sys.stderr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_stderr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEBUG_LOG, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_smatch.pyx":467
 * 
 * 
 * def clear_match_triple_dict():             # <<<<<<<<<<<<<<
 *     # dummy for api
 *     pass
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7_smatch_3clear_match_triple_dict, NULL, __pyx_n_s_smatch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_clear_match_triple_dict, __pyx_t_1) < 0) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_smatch.pyx":472
 * 
 * 
 * def compute_f(match_num, test_num, gold_num, verbose=False):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the f-score based on the matching triple number,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7_smatch_5compute_f, NULL, __pyx_n_s_smatch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_f, __pyx_t_1) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_smatch.pyx":1
 * cimport cython             # <<<<<<<<<<<<<<
 * from libcpp.unordered_map cimport unordered_map
 * from libcpp.unordered_set cimport unordered_set
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_int____std_3a__3a_unordered_map_3c_int_2c_int_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init _smatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _smatch");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return dict ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
        dictptr = (offset > 0) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (!dict || tp_dict_version != __PYX_GET_DICT_VERSION(dict))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if (likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* py_set_discard_unhashable */
static int __Pyx_PySet_DiscardUnhashable(PyObject *set, PyObject *key) {
    PyObject *tmpkey;
    int rv;
    if (likely(!PySet_Check(key) || !PyErr_ExceptionMatches(PyExc_TypeError)))
        return -1;
    PyErr_Clear();
    tmpkey = __Pyx_PyFrozenSet_New(key);
    if (tmpkey == NULL)
        return -1;
    rv = PySet_Discard(set, tmpkey);
    Py_DECREF(tmpkey);
    return rv;
}

/* py_set_remove */
static int __Pyx_PySet_RemoveNotFound(PyObject *set, PyObject *key, int found) {
    if (unlikely(found < 0)) {
        found = __Pyx_PySet_DiscardUnhashable(set, key);
    }
    if (likely(found == 0)) {
        PyObject *tup;
        tup = PyTuple_Pack(1, key);
        if (!tup)
            return -1;
        PyErr_SetObject(PyExc_KeyError, tup);
        Py_DECREF(tup);
        return -1;
    }
    return found;
}
static CYTHON_INLINE int __Pyx_PySet_Remove(PyObject *set, PyObject *key) {
    int found = PySet_Discard(set, key);
    if (unlikely(found != 1)) {
        return __Pyx_PySet_RemoveNotFound(set, key, found);
    }
    return 0;
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if ((0)) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
